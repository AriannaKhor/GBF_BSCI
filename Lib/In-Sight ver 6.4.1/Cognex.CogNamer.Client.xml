<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cognex.CogNamer.Client</name>
    </assembly>
    <members>
        <member name="T:Cognex.CogNamer.Client.ChangeHostPropertyChangedEventArgs">
            <summary>
             PropertyChangedEventArgs that indicates that a host's attribute has changed. When this occurs,
             the original device representing the host is removed and a new device representing the host
             (with the new changes) is added to the collection.
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.ChangeHostPropertyChangedEventArgs.RemovedDevice">
            <summary> The device that was removed as a result of the change. </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.ChangeHostPropertyChangedEventArgs.AddedDevice">
            <summary> The device that was added, as a result of the change. </summary>
        </member>
        <member name="T:Cognex.CogNamer.Client.AddHostPropertyChangedEventArgs">
            <summary> PropertyChangedEventArgs that indicates that a new host was added. </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.AddHostPropertyChangedEventArgs.AddedDevice">
            <summary> The device that was added. </summary>
        </member>
        <member name="T:Cognex.CogNamer.Client.Attributes.CogNamerApplicationIdAttribute">
            <summary>
            Contains the application id of the device.
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.CogNamerApplicationIdAttribute.#ctor(System.Byte[])">
            <summary>
            Public constructor for the application id attribute
            </summary>
            <param name="data">The data representing this record type.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.CogNamerApplicationIdAttribute.#ctor(System.Int32)">
            <summary>
            Public constructor for the application id attribute
            </summary>
            <param name="id">The value for the id</param>
        </member>
        <member name="P:Cognex.CogNamer.Client.Attributes.CogNamerApplicationIdAttribute.ApplicationId">
            <summary>
            Get the application id. Current there are two defined. 0 for the normal application and
            1 for the fail safe application.
            If there is a problem with the data a 0 is returned indicating that we assume this is the 
            normal application. 
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Attributes.CogNamerApplicationIdAttribute.IsInFailSafe">
            <summary>
            Is this in fail safe (application id 1)
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Attributes.CogNamerApplicationIdAttribute.StringValue">
            <summary>
            Get the string value
            </summary>
        </member>
        <member name="T:Cognex.CogNamer.Client.Attributes.CogNamerAttributeType">
            <summary>
            Enumeration containing the attribute types that can be defined for a 
            network device.
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerAttributeType.None">
            <summary>No attribute.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerAttributeType.KnownSystems">
            <summary>A list of known systems. This record type is used during system discovery.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerAttributeType.Credentials">
            <summary>Credentials record passed to a system when performing certain commands.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerAttributeType.DeviceType">
            <summary>Defines the type of device on the network</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerAttributeType.MacAddress">
            <summary>The MAC address of the network adapter on the device</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerAttributeType.HostName">
            <summary>The Host name of the device</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerAttributeType.IpAddress">
            <summary>The IP Address of the device</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerAttributeType.NetworkSettings">
            <summary>The TCP/IP settings on the device</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerAttributeType.ModelNumber">
            <summary>The Model Number of the device</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerAttributeType.SerialNumber">
            <summary>The Serial Number of the device</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerAttributeType.SoftwareVersion">
            <summary>The Software or Firmware version of the device</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerAttributeType.Description">
            <summary>A description of the device</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerAttributeType.GroupName">
            <summary>The name of the group the device belongs to</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerAttributeType.OrderingNumber">
            <summary>The ordering number of the device</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerAttributeType.Services">
            <summary>The TCP/IP services that are accessible on the device</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerAttributeType.LanguageId">
            <summary>The Language ID of the currently setup language for the device</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerAttributeType.Comments">
            <summary>User defined comments for the device</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerAttributeType.ApplicationId">
             <summary>The application ID (normal or fail safe)</summary>
            <remarks>  defualt host name was 46 but ApplicationId was re-used (accdentially) and since we don't need default host name
             it was decided to just use the ApplicationId. Checks are made to ensure that the ApplicationId is a number and not
             a string</remarks>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerAttributeType.DefaultName">
            <summary>The new default host name</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerAttributeType.ProductIdentity">
            <summary>The DMCC product identity</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerAttributeType.MinimumVersion">
            <summary>The minimum version of firmware this device supports.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerAttributeType.MinAttribute">
            <summary>The minimum attribute value.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerAttributeType.MaxGenericAttribute">
            <summary>Defines the maximum generic attribute value.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerAttributeType.MinDeviceSpecificAttribute">
            <summary>Defines the minimum device specific attribute value.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerAttributeType.MaxDeviceSpecificAttribute">
            <summary>Defines the maximum device specific attribute value.</summary>
        </member>
        <member name="T:Cognex.CogNamer.Client.Attributes.CogNamerCommand">
            <summary>
            Commands that can be checked for support using the 
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerCommand.IPRequest">
            <summary>Determines if the device sends IP Request commands on startup</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerCommand.SetNetwork">
            <summary>Determines if the device supports the SendSetNetwork command.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerCommand.FactoryReset">
            <summary>
            Determines if the device supports the SendSetNetwork 
            command with the reset parameter set to true.
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerCommand.Flash">
            <summary>
            Determines if the device supports displaying flashing lights
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerCommand.Hello">
            <summary>Command sent by the sensor upon request</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerCommand.Restart">
            <summary>Signal the device to reboot</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerCommand.SetAttribute">
            <summary>Set an attribute on the device</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerCommand.ResetAdminPassword">
            <summary>Determines if the device supports ResetAdminPassword</summary>
        </member>
        <member name="T:Cognex.CogNamer.Client.Attributes.CogNamerDeviceTypeAttribute">
            <summary>
            Defines the type of the network device.
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.CogNamerDeviceTypeAttribute.#ctor(Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType)">
            <summary>
            Create a new CogNamerDeviceTypeAttribute.
            </summary>
            <param name="deviceType"></param>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.CogNamerDeviceTypeAttribute.#ctor(System.Byte[])">
            <summary>
            Create a new CogNamerDeviceTypeAttribute.
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:Cognex.CogNamer.Client.Attributes.CogNamerDeviceTypeAttribute.Type">
            <summary>
            Gets the device type
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Attributes.CogNamerDeviceTypeAttribute.StringValue">
            <summary>
            Get the string value
            </summary>
        </member>
        <member name="T:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType">
            <summary>
            The type of the device.  
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.Any">
            <summary>Any Device</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSightAny">
            <summary>Any In-Sight</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSight5000Series">
            <summary>In-Sight 5000 series</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSight3400">
            <summary>In-Sight 3400</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSight1700SeriesWaferReader">
            <summary>In-Sight Wafer Reader</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSightMicroSeries">
            <summary>In-Sight Micro</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSightEZSeries">
            <summary>In-Sight EZ series</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSightAdvantageEngineSeries">
            <summary>In-Sight Advantage Engine series</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSightMicro1000LR">
            <summary>In-Sight Micro 1000LR</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSight500Series">
            <summary>In-Sight 500 series (a.k.a. Hummingbird)</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSight7000Series">
            <summary>In-Sight 7000 series (a.k.a. Rogue)</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSightReserved1">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSightReserved2">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSightABBSeries">
            <summary>In-Sight ABB series</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSightEZ700Series">
            <summary>In-Sight VC</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSightVCSeries">
            <summary>In-Sight VC</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSightMotoSightSeries">
            <summary>MotoSight series</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSight8200Series">
            <summary>In-Sight 8200 series.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSight8400Series">
            <summary>In-Sight 8400 series.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSight8405">
            <summary>In-Sight 8405</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSight2000Series">
            <summary>In-Sight 2000 series</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSight7500Series">
            <summary>In-Sight 7500-7900 series</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSight9000Series">
            <summary>In-Sight 9000 series</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSightEmulatorAny">
            <summary>Any In-Sight Emulator</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSightEmulatorPcHost">
            <summary>The In-Sight Emulator</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.VisionViewAny">
            <summary>Any VisionView</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.VisionView700">
            <summary>VisionView 700</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.VisionViewVGA">
            <summary>VisionView VGA Adapter</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.VisionViewPC">
            <summary>VisionView PC</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.VisionView700A">
            <summary>VisionView 700A - VV700 with nor flash instead of MDoC, and with twice the RAM</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.VisionView900">
            <summary>VisionView 900</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.VisionView1500">
            <summary>VisionView 1500</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.VisionViewVC">
            <summary>VisionView VC (Vision Controller)</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.VisionViewCE">
            <summary>VisionView Windows CE</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.IOModuleAny">
            <summary>Any I/O module</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.IOModuleCioMicro">
            <summary>CIO-Micro I/O Module</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.IOModuleCioMicroCC">
            <summary>CIO-Micro-CC CC-Link I/O Module</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.DataManAny">
            <summary>Any DataMan Device</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.DataMan200Series">
            <summary>DataMan 200 Series</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.DataMan8100Ethernet">
            <summary>DataMan 8100 Series</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.DataMan8100WiFi">
            <summary>DataMan 8120 Series</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.DataMan8500Ethernet">
            <summary>DataMan 8500 Series</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.DataMan8500WiFi">
            <summary>DataMan 8520 Series</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.DataMan500Series">
            <summary>DataMan 500 Series</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.DataMan8000Series">
            <summary>DataMan 8000 Series</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.DataManAdvantageSeries">
            <summary>DataMan Advantage Engine Series</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.DataManAT70Series">
            <summary>DataMan AT70 Series</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.DataMan300Series">
            <summary>DataMan 300 Series</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.DataMan8000BaseSeries">
            <summary>DataMan 8000/9000 Series Base Unit</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.DataMan9500Series">
            <summary>DataMan 9500 Series</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.DataMan503Series">
            <summary>DataMan 503 Series</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.DataMan50">
            <summary>DataMan 50</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.DataMan60">
            <summary>DataMan 60</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.DataMan8050Ethernet">
            <summary>DataMan 8050 Ethernet</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.DataMan8050Bluetooth">
            <summary>DataMan 8050 Bluetooth</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.DataMan8050WiFi">
            <summary>DataMan 8050 WiFi</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.DataMan8000BaseG2">
            <summary>DataMan 8000 G2 Base Station</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.DataMan8600Ethernet">
            <summary>DataMan 8600 Ethernet</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.DataMan8600Bluetooth">
            <summary>DataMan 8600 Bluetooth</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.DataMan8600WiFi">
            <summary>DataMan 8600 WiFi</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.DataManClepar">
            <summary>DataMan Clepar</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.DataManPC">
            <summary>DataMan PC</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.AT70DiagnosticsModeAny">
            <summary>Any Army Ant Controller</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.AT70DiagnosticsMode">
            <summary>Micro G Cameras configured as Army Ant slaves</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSightControllerAny">
            <summary>Any In-SightController</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSightController">
            <summary>The original In-SightController</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSightControllerAlligator">
            <summary>The Alligator controller (Hardware development still frozen as of 9-12-2018)</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSightSoftwareController">
            <summary>The In-Sight Software Controller</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSightControllerEmulator">
            <summary>The In-SightController Emulator</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSightControllerCameraAny">
            <summary>Any In-SightController Camera</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSightController8000SeriesCamera">
            <summary>Micro G Cameras configured as InSightController cameras</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSightController7800SeriesCamera">
            <summary>7000 Gen2 Cameras configured as InSightController cameras</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSight3dAny">
            <summary>Any In-Sight3d family</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.InSight3d">
            <summary>In-Sight 3d Hopper</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.ParentTypeMask">
            <summary>Masks off the parent type of the type value</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType.SubtypeMask">
            <summary>Masks off the subtype of the type value</summary>
        </member>
        <member name="T:Cognex.CogNamer.Client.Attributes.CogNamerIPAddressAttribute">
            <summary>
            Contains the IP Address of the network device
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.CogNamerIPAddressAttribute.#ctor(System.Byte[])">
            <summary>
            Public constructor for the IP Address attribute
            </summary>
            <param name="data">The data representing this record type.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.CogNamerIPAddressAttribute.#ctor(System.Net.IPAddress)">
            <summary>
            Public constructor for the IP Address attribute
            </summary>
            <param name="ip"></param>
        </member>
        <member name="P:Cognex.CogNamer.Client.Attributes.CogNamerIPAddressAttribute.IPAddress">
            <summary>
            Returns the IP Address
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Attributes.CogNamerIPAddressAttribute.StringValue">
            <summary>
            Get the string value
            </summary>
        </member>
        <member name="T:Cognex.CogNamer.Client.Attributes.CogNamerMacAddressAttribute">
            <summary>
            Contains the MAC Address of a network device
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerMacAddressAttribute._macAddress">
            <summary>The mac address</summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.CogNamerMacAddressAttribute.#ctor(System.Int64)">
            <summary>
            Public constructor
            </summary>
            <param name="macAddress"></param>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.CogNamerMacAddressAttribute.#ctor(System.Byte[])">
            <summary>
            Public constructor
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="P:Cognex.CogNamer.Client.Attributes.CogNamerMacAddressAttribute.StringValue">
            <summary>
            Get the formatted Mac Address string
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Attributes.CogNamerMacAddressAttribute.MacAddress">
            <summary>
            Gets the mac address as a long value
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.CogNamerMacAddressAttribute.Format(System.Int64)">
            <summary>
            Format a mac address as a string
            </summary>
            <param name="macAddress"></param>
            <returns></returns>
        </member>
        <member name="T:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceAttribute">
            <summary>
            Abstract base class of all NetworkDevice Attributes
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceAttribute._browseName">
            <summary>
            The programmatic name of this attribute type
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceAttribute._data">
            <summary>
            The data buffer that represents this attribute
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceAttribute.#ctor(Cognex.CogNamer.Client.Attributes.CogNamerAttributeType,System.Byte[])">
            <summary>
            Protected constructor for a CvsNetworkDeviceAttribute
            </summary>
            <param name="type">The attribute type of this attribute</param>
            <param name="data">The buffer representing the attribute data.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceAttribute.GetDisplayName(Cognex.CogNamer.Client.Attributes.CogNamerAttributeType)">
            <summary>
            Gets the localized display name for the specified attribute
            </summary>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="P:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceAttribute.StringValue">
            <summary>
            Get the string value of this attribute
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceAttribute.AttributeType">
            <summary>
            Returns the Attribute type of this attribute
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceAttribute.DisplayName">
            <summary>
            Gets a localized human readable name for this object. This will be the
            same as the BrowseName if no localized name is available.
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceAttribute.BrowseName">
            <summary>
            Gets a consistent name for this object that can be used programmatically.
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceAttribute.Description">
            <summary>
            Gets a localized description of the object. Will return null (not an
            empty string) if no description is available.
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceAttribute.ToString">
            <summary>
            Returns the StringValue property
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceAttribute.Equals(System.Object)">
            <summary>
            Returns true if the StringValue properties are equal
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceAttribute.GetHashCode">
            <summary>
            Returns a hash code based on the StringValue
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceAttribute.FromRecord(Cognex.CogNamer.Client.CogNamerRecord)">
            <summary>
            Create an attribute from the specified record data
            </summary>
            <param name="record">The record to convert into an attribute type</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceAttribute.ToRecord">
            <summary>
            Convert this attribute type to a record type.
            </summary>
            <returns>A new record type representing the data in this attribute.</returns>
        </member>
        <member name="T:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceAttributeDictionary">
            <summary>
            A collection of CvsNetworkDeviceAttributes
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceAttributeDictionary.#ctor(Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceAttributeDictionary)">
            <summary>
            Constructor
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceAttributeDictionary.#ctor(Cognex.CogNamer.Client.Attributes.INetworkDeviceAttributeProvider)">
            <summary>
            Constructor
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceAttributeDictionary.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceAttributeDictionary.Add(Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceAttribute)">
            <summary>
            Add an attribute
            </summary>
            <param name="attr"></param>
        </member>
        <member name="P:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceAttributeDictionary.Item(Cognex.CogNamer.Client.Attributes.CogNamerAttributeType)">
            <summary>
            Access to the attributes
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceAttributeDictionary.Contains(Cognex.CogNamer.Client.Attributes.CogNamerAttributeType)">
            <summary>
            Contains which attribute
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceAttributeDictionary.Merge(Cognex.CogNamer.Client.Attributes.INetworkDeviceAttributeProvider)">
            <summary>
            Merge Attributes
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="P:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceAttributeDictionary.Count">
            <summary>
            Count of attributes
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceAttributeDictionary.GetEnumerator">
            <summary>
            Get the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceAttributeDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the collection
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cognex.CogNamer.Client.Attributes.CogNamerNetworkSettingsAttribute">
            <summary>
            Contains the Network Settings defined on the network device
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.CogNamerNetworkSettingsAttribute.#ctor(System.Byte[])">
            <summary>
            Constructs the network settings attribute from the record buffer
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:Cognex.CogNamer.Client.Attributes.CogNamerNetworkSettingsAttribute.DhcpEnabled">
            <summary>
            Returns True if DHCP is enabled on the device
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Attributes.CogNamerNetworkSettingsAttribute.UsingLinkLocal">
            <summary>
            Returns True if the device is currently using a Link-Local IP Address
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Attributes.CogNamerNetworkSettingsAttribute.SubnetMask">
            <summary>
            Returns the subnet mask setting of the network device
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Attributes.CogNamerNetworkSettingsAttribute.DefaultGateway">
            <summary>
            Returns the default gateway setting of the network device
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Attributes.CogNamerNetworkSettingsAttribute.DnsServer">
            <summary>
            Returns the DNS server setting of the network device
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Attributes.CogNamerNetworkSettingsAttribute.DomainName">
            <summary>
            Returns the domain name setting of the network device
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Attributes.CogNamerNetworkSettingsAttribute.StringValue">
            <summary>
            Get the string value
            </summary>
        </member>
        <member name="T:Cognex.CogNamer.Client.Attributes.CogNamerServicesAttribute">
            <summary>
            Contains the services currently exposed on the network device
            </summary>
        </member>
        <member name="T:Cognex.CogNamer.Client.Attributes.CogNamerServicesAttribute.Service">
            <summary>
            A structure used to describe a service running on a network device
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Attributes.CogNamerServicesAttribute.Service.Name">
            <summary>
            Returns the Name of the service
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Attributes.CogNamerServicesAttribute.Service.Port">
            <summary>
            Returns the port number the service is running on
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerServicesAttribute._services">
            <summary>The services defined in the attribute.</summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.CogNamerServicesAttribute.#ctor(System.Byte[])">
            <summary>
            Construct a services attribute from the record data
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:Cognex.CogNamer.Client.Attributes.CogNamerServicesAttribute.Services">
            <summary>
            Gets the value of the security bits
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.CogNamerServicesAttribute.GetServicePort(System.String)">
            <summary>
            Returns the port that the service exists on.
            </summary>
            <param name="serviceName"></param>
            <returns>-1 if the service is not implemented</returns>
        </member>
        <member name="P:Cognex.CogNamer.Client.Attributes.CogNamerServicesAttribute.StringValue">
            <summary>
            Get the string value
            </summary>
        </member>
        <member name="T:Cognex.CogNamer.Client.Attributes.CogNamerStringAttribute">
            <summary>
            Contains any string based attribute
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.Attributes.CogNamerStringAttribute._value">
            <summary>The string value</summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.CogNamerStringAttribute.#ctor(Cognex.CogNamer.Client.Attributes.CogNamerAttributeType,System.String)">
            <summary>
            Public constructor for the CvsStringAttribute
            </summary>
            <param name="programmaticName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.CogNamerStringAttribute.#ctor(Cognex.CogNamer.Client.Attributes.CogNamerAttributeType,System.Byte[])">
            <summary>
            Public constructor for the CvsStringAttribute
            </summary>
            <param name="programmaticName"></param>
            <param name="data"></param>
        </member>
        <member name="P:Cognex.CogNamer.Client.Attributes.CogNamerStringAttribute.StringValue">
            <summary>
            Get the string value
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.CogNamerStringAttribute.Equals(System.Object)">
            <summary>
            Performs a case invariant check for host name and group name attributes.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.CogNamerStringAttribute.GetHashCode">
            <summary>
            Performs a case invariant check for host name and group name attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cognex.CogNamer.Client.Attributes.CogNamerUnknownAttribute">
            <summary>
            Holds the data for an attribute of an unknown type.
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.CogNamerUnknownAttribute.#ctor(Cognex.CogNamer.Client.Attributes.CogNamerAttributeType,System.Byte[])">
            <summary>
            Creates an attribute with an unknown type using the specified data
            </summary>
            <param name="type">The type of attribute</param>
            <param name="data">the data for the attribute</param>
        </member>
        <member name="P:Cognex.CogNamer.Client.Attributes.CogNamerUnknownAttribute.StringValue">
            <summary>
            Returns the string value of the data buffer.
            </summary>
        </member>
        <member name="T:Cognex.CogNamer.Client.Attributes.INetworkDeviceAttributeProvider">
            <summary>
            The INetworkDeviceAttributeProvider defines the interface used to 
            enumerate attributes of a NetworkDevice
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Attributes.INetworkDeviceAttributeProvider.Item(Cognex.CogNamer.Client.Attributes.CogNamerAttributeType)">
            <summary>
            Gets the attributes with the specified type.
            If the specified attribute does not exist, null should be returned.
            </summary>
            <param name="type">The attribute type to return</param>
            <returns>The requested attribute type, or null</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.Attributes.INetworkDeviceAttributeProvider.Contains(Cognex.CogNamer.Client.Attributes.CogNamerAttributeType)">
            <summary>
            Returns true if the collection contains the specified attribute type
            </summary>
            <param name="type"></param>
            <returns>True if the collection contains the specified attribute type</returns>
        </member>
        <member name="P:Cognex.CogNamer.Client.Attributes.INetworkDeviceAttributeProvider.Count">
            <summary>
            Returns the number of attributes contained in the provider
            </summary>
        </member>
        <member name="T:Cognex.CogNamer.Client.CogNamerCommandFailedException">
            <summary>
            A CogNamer command failed.
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerCommandFailedException.ErrorCode">
            <summary>
            The error code
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerCommandFailedException.#ctor(System.Int32,System.String)">
            <summary>
            Construction
            </summary>
            <param name="errorcode">The error code.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerEncrypt.Encrypt(System.String)">
            <summary>
            Use avencrypt to encrypt the data.
            </summary>
            <param name="str">The string</param>
            <returns>Encrypted byte array</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerEncrypt.Decrypt(System.Byte[])">
            <summary>
            Decrypts string data.
            </summary>
            <param name="src">The encrypted data</param>
            <returns>A decrypted string</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerEncrypt.Decrypt(System.String)">
            <summary>
            Decrypts a string.
            </summary>
            <param name="src">The encrypted string</param>
            <returns>A decrypted string</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerEncrypt.av_decrypt(System.Byte[])">
            <summary>
            Decrypts an array of bytes.
            </summary>
            <param name="encrypt">The encrypted array of bytes</param>
            <returns>A decrypted array of bytes</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerEncrypt.av_random(Cognex.CogNamer.Client.CogNamerEncrypt.SeedValue)">
            <summary>
            Returns a random value.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerEncrypt.UrShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Amount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerEncrypt.GetOffset(System.Byte)">
            <summary>
            Returns the offset.
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:Cognex.CogNamer.Client.CogNamerEthernetDeviceScope">
            <summary>
            Used to indicate where the device exists relative to the local host.
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerEthernetDeviceScope.LinkLocal">
            <summary>
            Indicates that the device is physically connected to the same network as
            the local host, but the device cannot be contacted via its IP Address.
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerEthernetDeviceScope.SubnetLocal">
            <summary>
            Indicates that the device is physically connected to the same network as
            the local host and the device can be contacted via its IP Address.  The 
            device can also be contacted via a subnet-directed broadcast.
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerEthernetDeviceScope.RemoteSubnet">
            <summary>
            The device is on a remote subnet.  The device can only be contacted through
            an IP Gateway.
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerEthernetDeviceScope.Unknown">
            <summary>
            It is unknown where the device exists.
            </summary>
        </member>
        <member name="T:Cognex.CogNamer.Client.ClearHostsPropertyChangedEventArgs">
            <summary> PropertyChangedEventArgs that all hosts have been cleared. </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.IEncrypt.Encrypt(System.String)">
            <summary>
            Use avencrypt to encrypt the data.
            </summary>
            <param name="str">The string</param>
            <returns>Encrypted byte array</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.IDecrypt.Decrypt(System.String)">
            <summary>
            Decrypts a string.
            </summary>
            <param name="src">The encrypted string</param>
            <returns>A decrypted string</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.IDecrypt.Decrypt(System.Byte[])">
            <summary>
            Decrypts string data.
            </summary>
            <param name="src">The encrypted data</param>
            <returns>A decrypted string</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.NetworkUtils.DisableUdpConnReset(System.Object)">
            <summary>
            Disables UDP connection reset exceptions on the socket.  By default, windows sockets will throw
            and exception if a connection reset message appears on the incoming port.  These reset messages
            can be caused by old messages on the network and should be ignored by the CogNamer implementation.
            </summary>
            <param name="socket">The socket to disable UDP Connection Reset exceptions on.</param>
        </member>
        <member name="T:Cognex.CogNamer.Client.CogNamerChangeSettingsService">
            <summary>
            Executes an ethernet change service using CogNamer
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerChangeSettingsService._address">
            <summary>The URL of the device to update.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerChangeSettingsService._listener">
            <summary>The network listener used to perform the configuration.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerChangeSettingsService._newSettings">
            <summary>The new settings for this device.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerChangeSettingsService._username">
            <summary>The current username.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerChangeSettingsService._password">
            <summary>The current password.</summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerChangeSettingsService.#ctor(System.String,System.String,System.String,Cognex.CogNamer.Client.ICogNamerNetworkMonitorNetworkInterface)">
            <summary>
            Change the network settings of a device
            </summary>
            <param name="hostName">The network address of the device to reset.</param>
            <param name="username">The username to connect to.</param>
            <param name="password">The password for the specified user</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerChangeSettingsService.Change(Cognex.CogNamer.Client.ICogNamerEthernetSettings,System.Threading.ManualResetEvent,System.Action{System.String})">
            <summary>
            Manage the entire change the ethernet settings of a device
            </summary>
            <param name="settings"></param>
            <param name="stopEvt">Stop the identify when Set.</param>
            <param name="StatusCallBack">Returns the status to this delegate.</param>
            <remarks>This is a blocking call</remarks>
        </member>
        <member name="T:Cognex.CogNamer.Client.CogNamerDevice">
            <summary>
            Holds the information about a device detected on the network.
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerDevice._attributes">
            <summary>Some additional attributes of this device</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerDevice._localInterface">
            <summary>The IP Address of the local network adapter that this sensor was detected on.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerDevice._scope">
            <summary>Where this device is located relative to the local host.</summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerDevice.#ctor(Cognex.CogNamer.Client.Attributes.INetworkDeviceAttributeProvider,System.Net.IPAddress,Cognex.CogNamer.Client.CogNamerEthernetDeviceScope)">
            <summary>
            Initializes a new instance of the <c>CogNamerDevice</c> class.
            </summary>
            <param name="attributes">The attributes read from the hello packet for this device.</param>
            <param name="localInterface">The interface which this device was detected on.</param>
            <param name="scope">Where this device is located relative to the local host.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerDevice.#ctor(Cognex.CogNamer.Client.CogNamerDevice)">
            <summary>
            Initializes a new instance of the <c>CvsNetworkDevice</c> class that is a clone of the specified instance.
            </summary>
            <param name="original">The instance to copy.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerDevice.System#ICloneable#Clone">
            <summary>Creates a new object that is a deep copy of the current instance.</summary>
            <returns>A new object that is a deep copy of this instance.</returns>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDevice.Attributes">
            <summary>
            Gets all of the attributes associated with this network device
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDevice.Type">
            <summary>
            Gets the type of this device.
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDevice.Scope">
            <summary>
            Returns the location of this device relative to the local host.
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDevice.UniqueIdentity">
            <summary>
            The unique identity for the device which is a combination of the
            the host name and the macid unless it's not a Cognex macid 
            and append the serial number if available
            
            If the macid is not a Cognex macid it is
            in all likelihood is an emulator or PC based system like VVPC. In which
            case the hostname is likely unique at least locally.
            
            If a CogNamer device supports a unique identity this would be used instead 
            of this combination.
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerDevice.IsEqual(System.Object)">
            <summary>
            Tests whether <i>obj</i> is a <see cref="T:Cognex.CogNamer.Client.CogNamerDevice" /> with the same identify of this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to test.</param>
            <returns>This method returns <c>true</c> if <i>obj</i> has the same identity as this instance.</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerDevice.Equals(System.Object)">
            <summary>
            Provide the standard Equals operator.
            Tests whether <i>obj</i> is a <see cref="T:Cognex.CogNamer.Client.CogNamerDevice" /> with the same identity of this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to test.</param>
            <returns>This method returns <c>true</c> if <i>obj</i> has the same identity as this instance.</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerDevice.GetHashCode">
            <summary>
            Provide the standard hash code of the identity of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerDevice.Matches(Cognex.CogNamer.Client.CogNamerDevice)">
            <summary>
            Compares the MAC address to the specified host to determine if the host is a match.
            </summary>
            <remarks>The name and type of sensor must also match.</remarks>
            <param name="host">The host.</param>
            <returns><c>true</c> if the given host has the same MAC address; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDevice.MacAddress">
            <summary>Gets the MAC address of the In-Sight sensor.</summary>
            <value>String.Empty if MAC address is unknown</value>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDevice.MacAddressLong">
            <summary>Gets the Mac address as a long value.</summary>
            <remarks>This property is only available in .NET applications.</remarks>
            <value>0 if MAC address is unknown</value>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDevice.LocalInterface">
            <summary>Gets the IP Address of the local network adapter that this sensor was detected on.</summary>
            <remarks>This property is only available in .NET applications. To obtain an
            an IP address for use in COM/ActiveX applications, use the 
            <see cref="P:Cognex.CogNamer.Client.CogNamerDevice.LocalInterfaceString"/> property instead.</remarks>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDevice.LocalInterfaceString">
            <summary>Gets the IP Address of the local network adapter that this sensor was detected on.</summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDevice.VersionString">
            <summary>Gets the firmware version of the In-Sight sensor.</summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDevice.Version">
            <summary>
            Gets the software version running on the device.  Returns null if the version is unknown.
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerDevice.TryParseInSightVersion(System.String,System.Version@)">
            <summary>
            Parses a string into a CogNamerHostVersion object.
            </summary>
            <param name="text">A version string formatted as: Major.Minor.Revision.Build</param>    
            <returns>A new CogNamerHostVersion object.</returns>
            <param name="ver"></param>
            <returns></returns>    
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDevice.SerialNumber">
            <summary>
            Gets the serial number of the In-Sight sensor
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerDevice.GetServices">
            <summary>
            Enumerates all the services
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerDevice.GetServicePort(System.String)">
            <summary>
             Gets the TCP/IP Services for the device
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerDevice.GetAttributeString(Cognex.CogNamer.Client.Attributes.CogNamerAttributeType)">
            <summary>
            Gets a string which represents the value of the specified attribute type.
            </summary>
            <param name="attributeType">The attribute type to convert to a string.</param>
            <returns>The attribute value as a string, or <c>String.Empty</c> if the attribute could not be found.</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerDevice.GetDeviceSpecificAttribute(System.Int32)">
            <summary>
            Returns the device specific attribute with the specified ID.
            </summary>
            <param name="attributeId">The attribute ID to get.</param>
            <returns>The value of the attribute, or string.Empty if the attribute was not found.</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerDevice.GetDeviceSpecificAttributeString(System.Int32)">
            <summary>
            Returns the device specific attribute with the specified ID.
            </summary>
            <param name="attributeId">The attribute ID to get.</param>
            <returns>The value of the attribute, or string.Empty if the attribute was not found.</returns>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDevice.ModelNumber">
            <summary>
            The In-Sight model number if the sensor is an In-Sight Sensor, or "PC" if the sensor is an emulator
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDevice.NetworkSettings">
            <summary>
            Gets the network settings associated with this device
            </summary>
            <value>Null when network settings are not available</value>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDevice.IsDhcpEnabled">
            <summary>
            Gets the Dhcp setting on this device
            </summary>
            <value>True if dhcp is enabled, false if not or if the value is unknown.</value>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDevice.IPAddress">
            <summary>
            Gets the IPAddress setting on this device
            </summary>
            <value>Null when the subnet mask is not available</value>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDevice.SubnetMask">
            <summary>
            Gets the subnet mask setting on this device
            </summary>
            <value>Null when the subnet mask is not available</value>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDevice.DefaultGateway">
            <summary>
            Gets the default gateway setting on this device
            </summary>
            <value>Null when the default gateway is not available</value>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDevice.DnsServer">
            <summary>
            Gets the dns server setting on this device
            </summary>
            <value>Null when the dns server is not available</value>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDevice.DomainName">
            <summary>
            Gets the domain name setting on this device
            </summary>
            <value>Null when the domain name is not available</value>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDevice.HostName">
            <summary>
            Gets the host name of this network device.
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDevice.Comments">
            <summary>
            Gets the comments for this network device.
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDevice.Description">
            <summary>
            Gets the description of this network device
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerDevice.InFailSafeMode">
            <summary>
            Is the device in FailSafeMode
            </summary>
            <returns>True if the device is running the fail safe application</returns>
        </member>
        <member name="T:Cognex.CogNamer.Client.CogNamerDeviceInfo">
            <summary>
            The class represents the a device for the CogNamer protocol. The CogNamer protocol
            is a low level protocol to find devices and for the devices to advertise their services.
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDeviceInfo.Name">
            <summary>
            Name of the device platform.
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDeviceInfo.DeviceType">
            <summary>
            CogNamer device type.
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDeviceInfo.DeviceSubType">
            <summary>
            CogNamer device subtype.
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDeviceInfo.Model">
            <summary>
            Device model
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDeviceInfo.Description">
            <summary>
            Device description
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDeviceInfo.Version">
            <summary>
            Device version
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDeviceInfo.FupVersion">
            <summary>
            FUP version
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDeviceInfo.SerialNumber">
            <summary>
            Device serial number
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDeviceInfo.MacId">
            <summary>
            Device MAC Address
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDeviceInfo.MacIdNum">
            <summary>
            Get the macId as a ulong
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDeviceInfo.PrimaryNetworkAdapter">
            <summary>
            The primary network adapter for the system.
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerDeviceInfo.NetworkAdapters">
            <summary>
            All the network adapters which CogNamer can run upon including
            the primary adapter.
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerDeviceInfo.#ctor">
            <summary>
            Constructs a default instance.
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerDeviceInfo.#ctor(System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The device name. Usually the HostName.</param>
            <param name="deviceType">The Cognamer defined type.</param>
            <param name="deviceSubType">The Cognamer defined subtype.</param>
            <param name="model">The name of the model. Has no meaning beyond the text.</param>
            <param name="description">A description of the device. Display only information.</param>
            <param name="version">The version string. Note most accept only Major.Minor.Build.Revision or Major.Minor.Revision (Build)</param>
            <param name="fupVersion">The highest version the device has ever been legally upgraded too.</param>
            <param name="serialNumber">The serial number, this is usually only used for display but can be used for the device ID.</param>
            <param name="macId">The MAC Id from the primary adapter.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerDeviceInfo.SetNetworkInformation(Cognex.CogNamer.Client.ICogNamerLocalNetworkInterface,Cognex.CogNamer.Client.ICogNamerLocalNetworkInterface[])">
            <summary>
            Setup the connection information for the device.
            </summary>
            <param name="primary">The primary network adapter which CogNamer uses.</param>
            <param name="all">All the network connections which may be used. This includes the primary connection in this list.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerDeviceInfo.ParseVersionString(System.String)">
            <summary>
            Creates a Version object by parsing a VisionView 
            version string which may be of the form Major.Minor.Build.Revision or
            Major.Minor.Revision (Build).
            </summary>
            <param name="val">The string to parse.</param>
            <returns>The version class created from the string.</returns>
            <exception cref="T:System.FormatException">If the value is not in the valid formats.</exception> 
        </member>
        <member name="T:Cognex.CogNamer.Client.CogNamerErrorCode">
            <summary>
            CogNamer Error Codes
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerErrorCode.Success">
            <summary>Command Succeeded</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerErrorCode.Failed">
            <summary>Command Failed</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerErrorCode.ErrorUnsupportedCommand">
            <summary>Command is not supported on this device</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerErrorCode.ErrorInvalidUsername">
            <summary>An invalid username was supplied</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerErrorCode.ErrorInvalidPassword">
            <summary>An invalid password was supplied</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerErrorCode.ErrorInsufficientPrivilege">
            <summary>The specified user does not have the required privilege level</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerErrorCode.ErrorMissingRequiredRecord">
            <summary>The command specified was missing a required record</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerErrorCode.ErrorInvalidNetworkSettings">
            <summary>The network settings specified are not valid</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerErrorCode.ErrorOnlySupportedDuringIpRequest">
            <summary>The command is only supported in response to an IP Request message</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerErrorCode.ErrorNonExistentRecord">
            <summary>A requested record does not exist</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerErrorCode.ErrorQueryCacheRecordTruncated">
            <summary>The Known Systems record was truncated in response to the Query Namer Cache message</summary>
        </member>
        <member name="T:Cognex.CogNamer.Client.CogNamerException">
            <summary>Exception that is thrown when an error is returned from a CogNamer command</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerException._errorCode">
            <summary>The error code which was returned by the CogNamer device.</summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerException.#ctor">
            <summary>Initializes a new <c>CvsCogNamerException</c>.</summary>
            <exclude/>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerException.#ctor(Cognex.CogNamer.Client.CogNamerErrorCode)">
            <summary>Initializes a new <c>CvsCogNamerException</c>.</summary>
            <param name="errorCode">The error code returned from the protocol</param>
            <exclude/>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerException.ErrorNumber">
            <summary>
            Gets the error number (HResult) associated with the exception.
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerException.GetErrorString(Cognex.CogNamer.Client.CogNamerErrorCode)">
            <summary>
            Gets the error string for the specified error code
            </summary>
            <param name="errorCode"></param>
            <returns></returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerException.#ctor(System.String)">
            <summary>Initializes a new <c>CvsCogNamerException</c>.</summary>
            <param name="message">The message.</param>
            <exclude/>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerException.#ctor(System.String,Cognex.CogNamer.Client.CogNamerException)">
            <summary>
            Initializes a new <c>CvsCogNamerException</c> from an existing 
            <c>CvsCogNamerException</c>.  Used when command specific errors
            need to be displayed.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The exception that caused the exception.</param>
            <exclude/>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerException.CogNamerErrorCode">
            <summary>
            Gets the CogNamer error code associated with this error
            </summary>
        </member>
        <member name="T:Cognex.CogNamer.Client.CogNamerIdentifyService">
            <summary>
            Implements the Identify service using the CogNamer protocol
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerIdentifyService._address">
            <summary>The URL of the device to update.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerIdentifyService._duration">
            <summary>The length of time to flash the device</summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerIdentifyService.#ctor(System.String,Cognex.CogNamer.Client.ICogNamerNetworkMonitorNetworkInterface)">
            <summary>
            Implements the Identify service using the CogNamer protocol
            </summary>
            <param name="hostName">The host to send the identify request to.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerIdentifyService.Identify(System.TimeSpan,System.Threading.ManualResetEvent)">
            <summary>
            Starts sending the device the message to identify itself
            </summary>
            <param name="duration">The length of time to identify itself for.</param>
            <param name="stopEvt">Stop the identify when Set.</param>
        </member>
        <member name="T:Cognex.CogNamer.Client.CogNamerListener">
            <summary>
            Listens for CogNamer devices on the network.
            </summary>
            <remarks>
            <p>This class listens for CogNamer devices on the network and provides the list of detected devices
            through its <see cref="P:Cognex.CogNamer.Client.CogNamerListener.Hosts"/> property. The value of this property will change whenever new sensors
            are detected on the network, but it does not detect when sensors have been removed from the
            network. </p></remarks>
        </member>
        <member name="T:Cognex.CogNamer.Client.CogNamerListener.CommandSupport">
            <summary>
            Result of whether a command is supported. There are three options.
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CommandSupport.NotSupported">
            <summary>Command is not supported</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CommandSupport.OnlyDuringIPREQUEST">
            <summary>Command is supported only during the IPRQUEST time period</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CommandSupport.Supported">
            <summary>The command is supported at all times</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.__switch">
            <summary>Controls debug tracing.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener._discoveryRateMs">
            <summary>The number of milliseconds between messages sent on the network when scanning remote subnets.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener._netInterface">
            <summary>The Network Interface for the NetworkListener</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener._V4Handler">
            <summary>The CogNamer protocol handler</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener._lockHosts">
            <summary>Object used for locking to (primarily) make use of _internalHosts thread-safe.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener._deviceTypes">
            <summary>The device types that we are browsing for.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener._refreshQueued">
            <summary>Set to <c>true</c> when a refresh has been Queued.  Set to false after the message has been sent.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener._syncContext">
            <summary>Set to the current Synchronization Context when the class is constructed.  This is used to marshall events.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener._isDisposed">
            <summary>Set to <c>true</c> when the object is disposed.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener._hosts">
            <summary>The hosts collection built from hosts identified on all network adapters.
            This field will be null until it is read through the Hosts property.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener._internalHosts">
            <summary>
            When a change is made to the Hosts collection, this member gets updated
            and mHosts gets cleared. 
            Because multiple threads can modify this member, locking is required in all threads
            that use it.
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener._newHostEvent">
            <summary>Signaled when a new host is detected</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener._discoverMisconfiguredDevices">
            <summary>Enables discovery of devices which are incorrectly configured.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener._bootList">
            <summary>
            The list of systems which were recently detected as having rebooted
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener._bootTimes">
            <summary>
            The list of systems which were recently detected as having rebooted
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener._testMode">
            <summary>
            Used to flag when we are in a unit test 
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener._remoteSubnets">
            <summary>
            List of remote subnets to scan
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener._internalRemoteSubnets">
            <summary>
            Cached list of remote subnets to scan.  This one will always match the mRemoteSubnetBrowsers list and
            is updated after Refresh is called on the Network Monitor.
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener._remoteSubnetBrowsers">
            <summary>
            List of remote subnet browsers which do the work of scanning the remote subnets.
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.mSubnetBrowserCancel">
            <summary>
            Stop the subnet browsers from updating
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.#ctor">
            <summary>Initializes a new instance of the <c>CvsNetworkListener</c> class.</summary>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerCommunicationException">The <c>CogNamerNetworkListener</c> class could not bind to the network</exception>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.#ctor(Cognex.CogNamer.Client.ICogNamerNetworkMonitorNetworkInterface)">
            <summary>Initializes a new instance of the <c>CvsNetworkListener</c> class.</summary>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerCommunicationException">The <c>CogNamerNetworkListener</c> class could not bind to the network</exception>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.#ctor(System.Threading.SynchronizationContext,Cognex.CogNamer.Client.ICogNamerNetworkMonitorNetworkInterface,System.Int32)">
            <summary>Initializes a new instance of the <c>CvsNetworkListener</c> class.</summary>
            <remarks>If you don't provide a SynchronizationContext then be sure you don't try to send another message from this call back. You're 
            responsible to post the callbacks to a different thread as blocks the receive thread</remarks>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerCommunicationException">The <c>CogNamerNetworkListener</c> class could not bind to the network</exception>
            /// <exception cref="T:System.PlatformNotSupportedException">Just don't use anything before XP and you'll live.</exception>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.Dispose">
            <summary>Forces the associated network resources to be freed. This should only be called if the associated object will no longer be used.</summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.DoDispose">
            <exclude/>
            <summary>
            Disables monitoring, marks the object as disposed, and frees the socket resources.
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerListener.IsDisposed">
            <summary>
            True if Dispose has been called.
            </summary>
        </member>
        <member name="T:Cognex.CogNamer.Client.CogNamerListener.SendCommandExDelegate">
            <summary>
            Used to invoke callbacks on SendCommandEx. This can be used to test packet contents without
            actually sending them.
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerListener.Hosts">
            <summary>
            Gets the collection that holds the current set of identified In-Sight sensors on the network.
            </summary>
            <value>The collection of <see cref="T:Cognex.CogNamer.Client.CogNamerDevice" /> objects.</value>
            <remarks>The contents of the collection returned by this property will not change. 
            When the list of detected hosts changes, a new collection will be created and this property
            will return the new collection.</remarks>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.NotifyHostsChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Sends the <see cref="E:Cognex.CogNamer.Client.CogNamerListener.HostsChanged"/> event notifications.
            </summary>
            <param name="propertyChangedEventArgs"> 
             The arguments that should be sent with the <see cref="E:Cognex.CogNamer.Client.CogNamerListener.HostsChanged"/> event. 
            </param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.NotifySystemBootDetected(Cognex.CogNamer.Client.CogNamerPacketEventArgs)">
            <summary>
            Sends the <see cref="E:Cognex.CogNamer.Client.CogNamerListener.SystemBootDetected"/> event notifications.
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerListener.DiscoverMisconfiguredDevices">
            <summary>
            Gets or sets a flag which enables the listener to locate misconfigured devices 
            which are locally connected to the same physical network as the application.
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.Refresh">
            <summary>
            Clears the current Hosts collection and requests identification from all In-Sight sensors on the same subnet.
            </summary>
            <remarks>
            It may take several seconds, for all sensors to identify themselves. When sensors are identified, the <see cref="P:Cognex.CogNamer.Client.CogNamerListener.Hosts" /> collection will be updated. 
            <p>If a new network adapter is enabled, calling this method will request sensors accessible via this new adapter to identify themselves.</p>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">The object was disposed.</exception>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerListener.DeviceTypes">
            <summary>
            Specifies the set of device types to search for
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerListener.RemoteSubnets">
            <summary>
            Gets the list of remote subnets to scan for devices.  After this list is changed,
            Refresh must be called on the CvsNetworkMonitor for the change to take effect.
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.ConfigureTestMode(System.Boolean,Cognex.CogNamer.Client.CogNamerListener.SendCommandExDelegate)">
            <summary>
            Used to set test mode flag and callback function pointer 
            when running a unit test and want to test the packet contents
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerListener.TestMode">
            <summary>
            Used to flag when we are in a unit test
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.TryIpParse(System.String,System.Net.IPAddress@)">
            <summary>
            Try to parse the name as an IP Address
            </summary>
            <param name="name"></param>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.Resolve(System.String)">
            <summary>
            Resolves the specified name to a CvsNetworkDevice describing the device with the specified name.
            </summary>
            <param name="name">The name to resolve to a <c>CvsNetworkDevice</c>.</param>
            <returns>The CvsNetworkDevice with the specified name, or null if one could not be found</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.ResolveDeviceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get information about the device with the specified name on the local network.
            </summary>
            <param name="name">The name of the device to look for</param>
            <param name="cancel">The cancellation token to exit. Can be None if no cancellation is requested.</param>
            <returns>The sensor information if the device is found, otherwise null.</returns>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerCommunicationException">Thrown if there is a problem sending packets to the network</exception>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.ResolveDevice(System.String)">
            <summary>
            Get information about the device with the specified name on the local network.
            </summary>
            <param name="name">The name of the device to look for</param>
            <returns>The sensor information if the device is found, otherwise null.</returns>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerCommunicationException">Thrown if there is a problem sending packets to the network</exception>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.ResolveDeviceAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get information about the device with the specified name on the local network.
            </summary>
            <param name="name">The name of the device to look for</param>
            <param name="broadcast">True to try resolving using the limited broadcast address rather than subnet directed broadcast addresses.</param>
            <param name="cancel">The cancellation token to exit. Can be None if no cancellation is requested.</param>
            <returns>The sensor information if the device is found, otherwise null.</returns>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerCommunicationException">Thrown if there is a problem sending packets to the network</exception>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.ResolveDevice(System.String,System.Boolean)">
            <summary>
            Get information about the device with the specified name on the local network.
            </summary>
            <param name="name">The name of the device to look for</param>
            <param name="broadcast">True to try resolving using the limited broadcast address rather than subnet directed broadcast addresses.</param>
            <returns>The sensor information if the device is found, otherwise null.</returns>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerCommunicationException">Thrown if there is a problem sending packets to the network</exception>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.ResolveDeviceAsync(System.Net.NetworkInformation.PhysicalAddress,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get information about the device with the specified MacID on the local network.
            </summary>
            <param name="macId">The macid of the device to look for</param>
            <param name="broadcast">True to try resolving using the limited broadcast address rather than subnet directed broadcast addresses.</param>
            <param name="cancel">The cancellation token to exit. Can be None if no cancellation is requested.</param>
            <returns>The sensor information if the device is found, otherwise null.</returns>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerCommunicationException">Thrown if there is a problem sending packets to the network</exception>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.ResolveDevice(System.Net.NetworkInformation.PhysicalAddress,System.Boolean)">
            <summary>
            Get information about the device with the specified MacID on the local network.
            </summary>
            <param name="macId">The macid of the device to look for</param>
            <param name="broadcast">True to try resolving using the limited broadcast address rather than subnet directed broadcast addresses.</param>
            <returns>The sensor information if the device is found, otherwise null.</returns>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerCommunicationException">Thrown if there is a problem sending packets to the network</exception>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.ResolveDeviceAsync(System.Net.IPAddress,System.Threading.CancellationToken)">
            <summary>
            Get information about the device with the specified IP Address on the local network.
            </summary>
            <param name="ip">The IP address of the device to look for</param>
            <param name="cancel">The cancellation token to exit. Can be None if no cancellation is requested.</param>
            <returns>The sensor information if the device is found, otherwise null.</returns>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerCommunicationException">Thrown if there is a problem sending packets to the network</exception>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.ResolveDevice(System.Net.IPAddress)">
            <summary>
            Get information about the device with the specified IP Address on the local network.
            </summary>
            <param name="ip">The IP address of the device to look for</param>
            <returns>The sensor information if the device is found, otherwise null.</returns>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerCommunicationException">Thrown if there is a problem sending packets to the network</exception>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.ResolveDeviceAsync(System.Net.IPAddress,System.Net.NetworkInformation.PhysicalAddress,System.Threading.CancellationToken)">
            <summary>
            Get information about the device with the specified IP Address on the local network.
            </summary>
            <param name="ip">The IP address of the device to look for</param>
            <param name="macId">The macid of the device to look for</param>
            <param name="cancel">The cancellation token to exit. Can be None if no cancellation is requested.</param>
            <returns>The sensor information if the device is found, otherwise null.</returns>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerCommunicationException">Thrown if there is a problem sending packets to the network</exception>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.ResolveDevice(System.Net.IPAddress,System.Net.NetworkInformation.PhysicalAddress)">
            <summary>
            Get information about the device with the specified IP Address on the local network.
            </summary>
            <param name="ip">The IP address of the device to look for</param>
            <param name="macId">The macid of the device to look for</param>
            <returns>The sensor information if the device is found, otherwise null.</returns>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerCommunicationException">Thrown if there is a problem sending packets to the network</exception>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.ResolveDeviceAsync(System.Net.IPAddress,System.String,System.Threading.CancellationToken)">
            <summary>
            Get information about the device with the specified IP Address on the local network.
            </summary>
            <param name="ip">The IP address of the device to look for</param>
            <param name="hostName">The hostname of the device.</param>
            <param name="cancel">The cancellation token to exit. Can be None if no cancellation is requested.</param>
            <returns>The sensor information if the device is found, otherwise null.</returns>
            <remarks>As of 1-21-2016 using the hostname is the only resolve to not incur the random delay in the response of the 
            resolve request.</remarks>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerCommunicationException">Thrown if there is a problem sending packets to the network</exception>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.ResolveDevice(System.Net.IPAddress,System.String)">
            <summary>
            Get information about the device with the specified IP Address on the local network.
            </summary>
            <param name="ip">The IP address of the device to look for</param>
            <param name="hostName">The hostname of the device.</param>
            <returns>The sensor information if the device is found, otherwise null.</returns>
            <remarks>As of 1-21-2016 using the hostname is the only resolve to not incur the random delay in the response of the 
            resolve request.</remarks>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerCommunicationException">Thrown if there is a problem sending packets to the network</exception>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.ResolveAsync(System.Net.IPAddress,System.Threading.CancellationToken)">
            <summary>
            Resolves the specified IP address to a CvsNetworkDevice describing the device at the specified IP address.
            </summary>
            <param name="ip">The IP Address to resolve to a <c>CvsNetworkDevice</c>.</param>
            <param name="cancel">The cancellation token to exit. Can be None if no cancellation is requested.</param>
            <returns>The CvsNetworkDevice with the specified IP address, or null if one could not be found</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.Resolve(System.Net.IPAddress)">
            <summary>
            Resolves the specified IP address to a CvsNetworkDevice describing the device at the specified IP address.
            </summary>
            <param name="ip">The IP Address to resolve to a <c>CvsNetworkDevice</c>.</param>
            <returns>The CvsNetworkDevice with the specified IP address, or null if one could not be found</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.SendFlash(Cognex.CogNamer.Client.CogNamerDevice)">
            <summary>
            Sends a message to the specified sensor which will cause it to
            flash its display for 3 seconds.  This can be used to find the 
            physical device associated with this object.
            </summary>
            <param name="sensor">The sensor to display flashing lights</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.SendResetToFactoryDefaults(Cognex.CogNamer.Client.CogNamerDevice,System.String,System.String)">
            <summary>
            Sends a message tot he specified system to reset its configuration
            to the factory defaults.
            </summary>
            <param name="system">The system to reset.</param>
            <param name="username">The user with admin privileges to use.</param>
            <param name="password">The users password.</param>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerCommunicationException">If the response is not received.</exception>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerException">If there was an error response.</exception>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.SendSetNetwork(Cognex.CogNamer.Client.CogNamerDevice,System.String,System.String,System.String,System.Boolean,System.Net.IPAddress,System.Net.IPAddress,System.Net.IPAddress,System.Net.IPAddress,System.String,System.Boolean)">
            <summary>
            Sends a message to the specified sensor to reconfigure its TCP/IP 
            settings to those specified in the parameters.
            </summary>
            <param name="sensor">The sensor to configure</param>
            <param name="username">An admin username</param>
            <param name="password">The password for the specified username</param>
            <param name="hostname">The new host name for the device</param>
            <param name="useDhcp">True to tell the device to use DHCP</param>
            <param name="ip">The new IP address for the device if not using DHCP</param>
            <param name="subnet">The new subnet mask for the device if not using DHCP</param>
            <param name="gateway">The new default gateway to use if not using DHCP</param>
            <param name="dns">The new DNS server to use if not using DHCP</param>
            <param name="domainName">The new domain name for the device if not using DHCP</param>
            <param name="reset">True to reset all other parameters to factory default settings</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.SendResetAdminPassword(Cognex.CogNamer.Client.CogNamerDevice)">
            <summary>
            Sends a command to the specified sensor to clear the administrator password. 
            </summary>
            <param name="sensor">The sensor to clear the password on.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.SupportsCommand(Cognex.CogNamer.Client.CogNamerDevice,Cognex.CogNamer.Client.Attributes.CogNamerCommand)">
            <summary>
            Determines if the specified device supports sending a particular command
            without being connected to the device via a TCP channel.
            </summary>
            <param name="sensor">The sensor to inspect</param>
            <param name="cmd">The command to inspect</param>
            <returns>True if the specified device supports the specified command</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.GetSupportsCommand(Cognex.CogNamer.Client.CogNamerDevice,Cognex.CogNamer.Client.Attributes.CogNamerCommand)">
            <summary>
            Determines if the specified device supports sending a particular command
            without being connected to the device via a TCP channel.
            </summary>
            <param name="sensor">The sensor to inspect</param>
            <param name="cmd">The command to inspect</param>
            <returns>True if the specified device supports the specified command</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.SendRestartCommand(Cognex.CogNamer.Client.CogNamerDevice,System.String,System.String)">
            <summary>
            Send a restart command to the device.
            </summary>
            <param name="sensor">The device to reset.</param>
            <param name="username">An admin username.</param>
            <param name="password">The password for the specified username.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.GetDefaultHostName(Cognex.CogNamer.Client.CogNamerDevice)">
            <summary>
            Gets the default host name for the specified device
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.RequestAdditionalAttributes(Cognex.CogNamer.Client.CogNamerDevice,Cognex.CogNamer.Client.Attributes.CogNamerAttributeType[])">
            <summary>
            Requests the network settings for the specified sensor
            </summary>
            <param name="device"></param>
            <param name="attributeTypes">The attribute types to request.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.SendIdentify(System.Object)">
            <summary>
            Broadcasts an Identify message.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.InvalidateHostsCollection">
            <summary>
            Invalidates the mHosts collection so it will get regenerated on request.
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.AddHost(Cognex.CogNamer.Client.CogNamerDevice)">
            <summary>
            Adds a new host to the hosts table.
            </summary>
            <param name="host">The host to add.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.MarkHostChanged(Cognex.CogNamer.Client.CogNamerDevice,Cognex.CogNamer.Client.CogNamerDevice)">
            <summary>
             Mark a host's attribute as changed by removing the old CogNamer device associated with the
             host and replace it with the new CogNamerDevice associated with the host.
            </summary>
            <param name="oldHost"> The old device that is to be removed from the collection. </param>
            <param name="newHost"> The new device that should be added to the collection as a replacement
             for <paramref name="oldHost"/>. </param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.ClearHosts">
            <summary>
            Removes all hosts from the hosts table.
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.GetHost(System.String)">
            <summary>
            Gets a host from the current hosts table.
            </summary>
            <param name="mac">The mac address of the host to get.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.GetHostCache">
            <summary>
            Returns a copy of the internal host cache.
            </summary>
            <returns>A copy of the internal host cache.</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.AddHostToCache(Cognex.CogNamer.Client.CogNamerDevice)">
            <summary>
            Adds the specified host to the host cache.  If a matching host already exists, the new host
            will replace the old host entry.
            </summary>
            <param name="newHost">The network device to add to the cache.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.IsSupportedHostType(Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceType)">
            <summary>
            Returns true if the network monitor is browsing for devices of the specified type.
            </summary>
            <param name="type">The type of device to check</param>
            <returns>True if currently browsing for the specified device type</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.IdentifyDevice(System.String,System.TimeSpan,System.Threading.ManualResetEvent,Cognex.CogNamer.Client.ICogNamerNetworkMonitorNetworkInterface)">
            <summary>
            Identify a device for a specific duration.    
            </summary>
            <param name="hostName">The host to send the identify request to.</param>
            <param name="duration">The length of time to identify itself for.</param>
            <param name="stopEvt">Stop the identify when Set.</param>
            <remarks>This is a blocking call</remarks>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.ResetPassword(System.String,System.Threading.ManualResetEvent,System.Action{System.String,System.Int32},Cognex.CogNamer.Client.ICogNamerNetworkMonitorNetworkInterface)">
            <summary>
            Manage the entire process of reseting the password
            </summary>
            <param name="deviceAddress">The Mac ID of the device to reset.</param>
            <param name="stopEvt">Stop the identify when Set.</param>
            <param name="statusCallBack">Returns the status to this delegate.</param>
            <remarks>This is a blocking call</remarks>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.ResetDeviceToDefaults(System.String,System.String,System.String,System.Threading.ManualResetEvent,System.Action{System.String},Cognex.CogNamer.Client.ICogNamerNetworkMonitorNetworkInterface)">
            <summary>
            Manage the entire process of reseting a device to the defaults
            </summary>
            <param name="deviceAddress">The network address of the device to reset.</param>
            <param name="username">The username to connect to.</param>
            <param name="password">The password for the specified user</param>
            <param name="stopEvt">Stop the identify when Set.</param>
            <param name="statusCallBack">Returns the status to this delegate.</param>
            <remarks>This is a blocking call</remarks>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.ChangeNetworkSettings(System.String,System.String,System.String,Cognex.CogNamer.Client.ICogNamerEthernetSettings,System.Threading.ManualResetEvent,System.Action{System.String},Cognex.CogNamer.Client.ICogNamerNetworkMonitorNetworkInterface)">
            <summary>
            Manage the entire change the ethernet settings of a device
            </summary>
            <param name="hostName">The network address of the device to reset.</param>
            <param name="username">The username to connect to.</param>
            <param name="password">The password for the specified user</param>
            <param name="settings">The settings to change to.</param>
            <param name="stopEvt">Stop the identify when Set.</param>
            <param name="statusCallBack">Returns the status to this delegate.</param>
            <remarks>This is a blocking call</remarks>
        </member>
        <member name="E:Cognex.CogNamer.Client.CogNamerListener.SystemBootDetected">
            <summary>
            Fired when a system boot event is detected on the network.
            NOTE: These notifications are fired on the CogNamerListener thread.
            </summary>
        </member>
        <member name="E:Cognex.CogNamer.Client.CogNamerListener.PacketReceived">
            <summary>
            TODO Can we remove this?
            Receive notifications of namer packets.
            NOTE: These notifications are fired on the CogNamerListener thread.
            </summary>
        </member>
        <member name="E:Cognex.CogNamer.Client.CogNamerListener.HostsChanged">
            <summary>
            Receive notifications of changes to the <see cref="P:Cognex.CogNamer.Client.CogNamerListener.Hosts"/> property.
            NOTE: These notifications are fired on the main UI Thread.
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.NamerPacketNotify(System.Object,Cognex.CogNamer.Client.CogNamerPacketEventArgs)">
            <summary>
            Handles packets from the network listener for detected boot-up events, and notifying the 
            process/task modifying the network settings of a device.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler">
            <summary>
            This class manages the CogNamer protocol and passes information to the CogNamerListener.
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler._switch">
            <summary>Controls debug tracing.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.NamerPort">
            <summary>
            Defines the port used for the Namer protocol.
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.FlexibleNamerProtocolVersion">
            <summary>
            Defines the Namer protocol version processed.
            </summary>
            <remarks>
            1 == initial experimental
            2 == production 1024 byte (2.x - 3.x)
            3 == production 512 byte (not really used)
            4 == flexible 4.x namer protocol
            </remarks>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler._waitingMessages">
            <summary>
            List of messages that we are waiting to receive
            </summary>
        </member>
        <member name="T:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.NamerCommand">
            <summary>
            Namer protocol packet types
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.NamerCommand.NOOP">
            <summary>Noop packet</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.NamerCommand.Hello">
            <summary>identify this host</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.NamerCommand.Identify">
            <summary>ask everyone to identify themselves</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.NamerCommand.IPRequest">
            <summary>request IP assignment</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.NamerCommand.IPAssign">
            <summary>IP assignment</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.NamerCommand.FactoryReset">
            <summary>Reset the system to a factory default state</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.NamerCommand.SetAttribute">
            <summary>Set Attribute</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.NamerCommand.Flash">
            <summary>Flash LEDs to identify device</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.NamerCommand.QueryCache">
            <summary>Query the cache list on device</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.NamerCommand.RestartSystem">
            <summary>Request that the system firmware restart</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.NamerCommand.GetAttribute">
            <summary>Get the value of an attribute record</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.NamerCommand.ResetAdminPassword">
            <summary>Clears the administrator password</summary>
        </member>
        <member name="T:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.NamerFlags">
            <summary>
            Namer V4 Protocol Message Flags
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.NamerFlags.None">
            <summary>No flags are set</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.NamerFlags.SupportsCommandProbe">
            <summary>Set to determine if the </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.NamerFlags.Broadcast">
            <summary>Broadcast response on 255.255.255.255</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.NamerFlags.Response">
            <summary>Response message</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.NamerMagic4">
            <summary>
            Defines the magic number used to identify NamerV4 packets 'CGNM'.
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler._netMonitor">
            <summary>
            Network Monitor interface
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler._netInterface">
            <summary>
            Network Interface
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler._responseReceivedEvent">
            <summary>
            Signaled when a response packet is received
            </summary>
        </member>
        <member name="E:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.PacketReceived">
            <summary>
            OnPacketReceived event
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler._CommandMap">
            <summary>
            Map commands. This likely can be removed and is due to legacy which had its origins of when
            we supported two CogNamer protocols and added Backup/Restore commands to VisionView
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.TestCallback">
            <summary>
            The delegate used to callback a unit test for packet contents from SendCommandEx
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.mEncryptor">
            <summary>
            Abtraction of the encryption. Right now defaults to av_encrypt
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.#ctor(Cognex.CogNamer.Client.CogNamerListener,Cognex.CogNamer.Client.ICogNamerNetworkMonitorNetworkInterface,Cognex.CogNamer.Client.IEncrypt)">
            <summary>
            CogNamer protocol Handler
            </summary>
            <param name="netMonitor">The network listener.</param>
            <param name="netInterface">The network interface.</param>
            <param name="encrypt">The encryption to use. Defaults to AvEncrypt</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.SendRefresh">
            <summary>
            Sends a refresh broadcast to the network
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.SendIdentify(System.Net.IPAddress)">
            <summary>
            Sends an Identify message to the specified IP address
            </summary>
            <param name="ip"></param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.SendIdentify(System.String)">
            <summary>
            Sends an Identify message for a specific name
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.SendSupportsCommand(Cognex.CogNamer.Client.CogNamerDevice,Cognex.CogNamer.Client.Attributes.CogNamerCommand)">
            <summary>
            Sends a command to the specified device to determine if it supports the requested command.
            </summary>
            <param name="device">The device to query.</param>
            <param name="cmd">The command to check.</param>
            <returns>True if the device supports the specified command.</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.GetSupportsCommand(Cognex.CogNamer.Client.CogNamerDevice,Cognex.CogNamer.Client.Attributes.CogNamerCommand)">
            <summary>
            Sends a command to the specified device to determine if it supports the requested command.
            </summary>
            <param name="device">The device to query.</param>
            <param name="cmd">The command to check.</param>
            <returns>When the command is supported.</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.SendSetNetwork(Cognex.CogNamer.Client.CogNamerDevice,System.String,System.String,System.String,System.Boolean,System.Net.IPAddress,System.Net.IPAddress,System.Net.IPAddress,System.Net.IPAddress,System.String,System.Boolean)">
            <summary>
            Sets the network settings on this device using the CogNamer protocol
            </summary>
            <param name="device"></param>
            <param name="username"></param>
            <param name="password"></param>
            <param name="hostname"></param>
            <param name="useDhcp"></param>
            <param name="ip"></param>
            <param name="subnet"></param>
            <param name="gateway"></param>
            <param name="dns"></param>
            <param name="domainName"></param>
            <param name="reset"></param>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerCommunicationException">Thrown if a response was not received from the device</exception>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerException">Thrown if the command fails</exception>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.SendFactoryReset(Cognex.CogNamer.Client.CogNamerDevice,System.String,System.String)">
            <summary>
            Sends a message tot he specified system to reset its configuration
            to the factory defaults.
            </summary>
            <param name="device">The system to reset.</param>
            <param name="username">The user with admin privileges to use.</param>
            <param name="password">The users password.</param>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerCommunicationException">If the response is not received.</exception>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerException">If there was an error response.</exception>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.SendRestart(Cognex.CogNamer.Client.CogNamerDevice,System.String,System.String)">
            <summary>
            Sends a command to the device to trigger it to restart.
            </summary>
            <param name="device">The device to send the restart command.</param>
            <param name="username">A username that has permission to restart the device.</param>
            <param name="password">The password for the specified username</param>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerCommunicationException">Thrown if a response was not received from the device</exception>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerException">Thrown if the command fails</exception>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.SendFlash(Cognex.CogNamer.Client.CogNamerDevice)">
            <summary>
            Sends a command to the device to trigger it to identify itself by flashing a display.
            </summary>
            <param name="device">The device to identify itself.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.SendResetAdminPassword(Cognex.CogNamer.Client.CogNamerDevice)">
            <summary>
            Sends a command to the device to clear the administrator password. 
            This only is available on the local network
            </summary>
            <param name="device">The device to clear the password on.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.GetDefaultHostName(Cognex.CogNamer.Client.CogNamerDevice)">
            <summary>
            Gets the default host name for the specified device.
            </summary>
            <param name="device">The device to get the default hostname for.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.GetAttribute(Cognex.CogNamer.Client.CogNamerDevice,Cognex.CogNamer.Client.Attributes.CogNamerAttributeType)">
            <summary>
            Requests a specific attribute from the specified device.
            </summary>
            <param name="device">The device to request an attribute from.</param>
            <param name="attribute">The attribute to request.</param>
            <returns>The requested attribute, or null if the attribute could not be obtained.</returns>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerCommunicationException">If a response was not received from the device.</exception>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerException">If the device returned an error code to the request.</exception>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.GetAttributes(Cognex.CogNamer.Client.CogNamerDevice,Cognex.CogNamer.Client.Attributes.CogNamerAttributeType[])">
            <summary>
            Requests a set of attributes from the specified device.
            </summary>
            <param name="device">The device to request an attribute from.</param>
            <param name="attributes">The attributes to request.</param>
            <returns>The requested attribute, or null if the attribute could not be obtained.</returns>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerCommunicationException">If a response was not received from the device.</exception>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerException">If the device returned an error code to the request.</exception>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.HandlePacket(System.Object,Cognex.CogNamer.Client.ICogNamerPacketReceivedEventArgs)">
            <summary>
            Handles a packet from the network stream.
            </summary>
            <param name="sender"></param>
            <param name="p"></param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.NetworkChangedNotify">
            <summary>
            Called when the network adapter detects that the network configuration has changed
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.HandleHelloPacket(Cognex.CogNamer.Client.ICogNamerPacketReceivedEventArgs,System.IO.BinaryReader)">
            <summary>
            Called to handle an incoming hello packet
            </summary>
            <param name="p">The incoming packet</param>
            <param name="br">The byte stream for the packet</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.HandleIPRequest(Cognex.CogNamer.Client.ICogNamerPacketReceivedEventArgs,System.IO.BinaryReader)">
            <summary>
            Called to handle an incoming IP Request packet
            </summary>
            <param name="p">The incoming packet</param>
            <param name="br">The byte stream for the packet</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.HandleResponsePacket(Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.NamerCommand,Cognex.CogNamer.Client.ICogNamerPacketReceivedEventArgs,System.IO.BinaryReader)">
            <summary>
            Called to handle an incoming response packet
            </summary>
            <param name="nCmd">The command in the received packet.</param>
            <param name="p">The incoming packet.</param>
            <param name="br">The byte stream for the packet.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.HandleQueryCache(Cognex.CogNamer.Client.ICogNamerPacketReceivedEventArgs)">
            <summary>
            Called to handle an incoming Query Cache packet
            </summary>
            <param name="p">The incoming packet</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.CreateCredentialsRecord(System.String,System.String)">
            <summary>
            Creates a credentials record from the specified username and password.
            </summary>
            <param name="user">The user name.</param>
            <param name="pass">The password.</param>
            <returns>A new record containing the credentials.</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.RegisterCommandMapping(Cognex.CogNamer.Client.Attributes.CogNamerCommand,Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.NamerCommand)">
            <summary>
             Map commands. This likely can be removed and is due to legacy which had its origins of when
            we supported two CogNamer protocols and added Backup/Restore commands to VisionView
            </summary>
            <param name="cmd"></param>
            <param name="pCmd"></param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.GetNamerCommand(Cognex.CogNamer.Client.Attributes.CogNamerCommand)">
            <summary>
            Converts a <c>CogNamerCommand</c> to a <c>NamerCommand</c>
            </summary>
            <param name="cmd">The command to convert</param>
            <returns>The equivalent NamerCommand</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.SendCommand(Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.NamerCommand,Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.NamerFlags,Cognex.CogNamer.Client.CogNamerRecordList,Cognex.CogNamer.Client.CogNamerDevice)">
            <summary>
            Sends a command to the specified device.
            </summary>
            <param name="cmd">The command type to send.</param>
            <param name="flags">The contents of the flags field.</param>
            <param name="records">The records to include in the datagram.</param>
            <param name="device">The device to send the command to.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.GetUnicastEndpoint(Cognex.CogNamer.Client.CogNamerDevice)">
            <summary>
            Gets the unicast endpoint for the specified device.
            </summary>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.CanSendUnicast(Cognex.CogNamer.Client.CogNamerDevice)">
            <summary>
            Returns true if we can unicast to this device.
            </summary>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.SendCommandEx(Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.NamerCommand,Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.NamerFlags,Cognex.CogNamer.Client.CogNamerErrorCode,Cognex.CogNamer.Client.CogNamerRecordList,System.Net.IPEndPoint)">
            <summary>
            Sends a command to the specified device.
            </summary>
            <param name="cmd">The command type to send.</param>
            <param name="flags">The contents of the flags field.</param>
            <param name="resultCode">The contents of the result code field.</param>
            <param name="records">The records to include in the datagram.</param>
            <param name="endPoint">The device to send the command to.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.SendCommandGetResponse(Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.NamerCommand,Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.NamerFlags,Cognex.CogNamer.Client.CogNamerRecordList,Cognex.CogNamer.Client.CogNamerDevice,System.Int32,System.Int32)">
            <summary>
            Send a V4 protocol message and get the response
            </summary>
            <remarks>Note: CanSendUnicast will
            send NOOP messages to test the connection. This might result in a delay of 
            3 seconds if no response is recieved. </remarks>
            <param name="cmd">The CogNamer command</param>
            <param name="flags">Set to Broadcast if the command is required to be broadcasted to the physical network (255.255.255.255)</param>
            <param name="records">The CogNamer records to send with the message. The MacAddress record will be included if it not already.</param>
            <param name="device">The device to send the message too. If this is connect via link-local then command will be sent via broadcast.</param>
            <param name="timeout">The timeout in milliseconds. Typically 1000ms</param>
            <param name="retries">The number of retries. Typically 3.</param>
            <returns>The response.</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.SendCommandGetResponse(Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.NamerCommand,Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.NamerFlags,Cognex.CogNamer.Client.CogNamerRecordList,System.Net.IPEndPoint,System.Int64,System.Int32,System.Int32)">
            <summary>
            Send a V4 protocol message and get the response
            </summary>
            <param name="cmd"></param>
            <param name="flags"></param>
            <param name="records"></param>
            <param name="endPoint"></param>
            <param name="macAddress"></param>
            <param name="timeout"></param>
            <param name="retries"></param>
            <returns></returns>
        </member>
        <member name="T:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.CogNamerResponse">
            <summary>
            This class handles waiting for a response from a CogNamer command
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.CogNamerResponse.Command">
            <summary>The namer command that we are waiting for a response from</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.CogNamerResponse.MacAddress">
            <summary>The MAC address of the device which we sent the command to</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.CogNamerResponse.GotResponse">
            <summary>True if the response has been received</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.CogNamerResponse.ErrorCode">
            <summary>The error code from the response</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.CogNamerResponse.Records">
            <summary>The list of records that was received with the response</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.CogNamerResponse.ResponseReceivedEvent">
            <summary>Event which is sent once the event is received</summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.CogNamerResponse.#ctor(Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.NamerCommand,System.Int64)">
            <summary>
            Constructs a response object
            </summary>
            <param name="cmd">The command which was sent</param>
            <param name="macAddress">The MAC address of the target device</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerProtocolHandler.CogNamerResponse.Dispose">
            <summary>
            Disposes of the response object
            </summary>
        </member>
        <member name="T:Cognex.CogNamer.Client.CogNamerListener.CogNamerRemoteSubnetBrowser">
            <summary>
            The CogNamerRemoteSubnetBrowser class is used by the CogNamerListener class to do the work of
            scanning a remote subnet for sensors.
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerRemoteSubnetBrowser.mSubnet">
            <summary>The remote subnet to scan</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerRemoteSubnetBrowser.DiscoveryRateMsDefault">
            <summary>The number of milliseconds between messages sent on the network</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerRemoteSubnetBrowser.mDiscoveryRateMs">
            <summary>The number of milliseconds between messages sent on the network</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerRemoteSubnetBrowser.mInterScanDelay">
            <summary>After completing a scan, the number of milliseconds to wait before scanning again.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerRemoteSubnetBrowser.mMaxHostAddress">
            <summary>The maximum host address on the subnet.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerRemoteSubnetBrowser.mNetAddress">
            <summary>The network address of the subnet.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerRemoteSubnetBrowser.mSyncRoot">
            <summary>Used for Lock()</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerRemoteSubnetBrowser.mRefresh">
            <summary>When refresh is call this will trigger an immediate restart of the scan.</summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerRemoteSubnetBrowser.#ctor(Cognex.CogNamer.Client.ICogNamerRemoteSubnet,System.IProgress{Cognex.CogNamer.Client.CogNamerDevice},System.Threading.CancellationToken,System.Int32)">
            <summary>
            Constructor for the remote subnet browser.
            </summary>
            <param name="subnet">The subnet to scan.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerRemoteSubnetBrowser.Refresh">
            <summary>
            Restart the scan
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerListener.CogNamerRemoteSubnetBrowser.RemoteSubnet">
            <summary>
            Gets the remote subnet associated with this browser.
            </summary>
        </member>
        <member name="T:Cognex.CogNamer.Client.CogNamerListener.CogNamerResolver">
            <summary>
            This class is used to search the local network for devices implementing the CogNamer protocol.
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerResolver.RecvPacketSize">
            <summary>
            The size of a single block of data received from the socket. 
            It will include a single datagram packet from the socket.
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerResolver.RecvBufferSize">
            <summary>
            The size of the socket's receive buffer.  Set to 130000 to support
            250 namer packets.  This is the largest known installation of in-sights on a single network
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerResolver.NamerMagic4">
            <summary>
            Defines the magic number used to identify NamerV4 packets 'CGNM'.
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerResolver.NamerPort">
            <summary>
            Defines the port used for the Namer protocol.
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerResolver.AltNamerPort">
            <summary>
            Defines the alternate port used for the Namer protocol.
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerResolver.FlexibleNamerProtocolVersion">
            <summary>
            Defines the Namer protocol version processed.
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerResolver.ResolveTimeout">
            <summary>
            Defines the maximum amount of time we wait to resolve the host in ms.
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerListener.CogNamerResolver.ResolveReadTimeout">
            <summary>
            The interval between checks for data when resolving a device.
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerResolver.ResolveAsync(Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceAttribute,System.Int32,System.Net.IPAddress,System.Threading.CancellationToken)">
            <summary>
            Searches the local network for a device containing the specified records.
            </summary>
            <param name="filter"></param>
            <param name="timeout">In milliseconds</param>
            <param name="dstIp">IP Address of the device we are resolving, 
            IPAddress.Any to send on all connected networks, or 
            IPAddress.Broadcast to send a limited broadcast.</param>
            <param name="cancel">The cancellation token to exit. Can be null if no cancellation is requested.</param>
            <returns></returns>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerCommunicationException">Thrown if there is a problem sending packets to the network</exception>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerResolver.Resolve(Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceAttribute,System.Int32,System.Net.IPAddress)">
            <summary>
            Searches the local network for a device containing the specified records.
            </summary>
            <param name="filter"></param>
            <param name="timeout">In milliseconds</param>
            <param name="dstIp">IP Address of the device we are resolving, 
            IPAddress.Any to send on all connected networks, or 
            IPAddress.Broadcast to send a limited broadcast.</param>
            <returns></returns>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerCommunicationException">Thrown if there is a problem sending packets to the network</exception>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerResolver.BindSockets(Cognex.CogNamer.Client.CogNamerListener.CogNamerResolver.ResolveMode)">
            <summary>
            Binds the sockets used for resolving based on the resolve mode
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerResolver.BindCogNamerSocket(System.Net.IPAddress,System.Int32,System.Boolean)">
            <summary>
            Setup a CogNamer socket for sending and receiving of CogNamer packets.
            </summary>
            <param name="localIP">The local IP address to bind to, or IPAddress.Any to bind to all adapters.</param>
            <param name="port">The UDP port to bind to.</param>
            <param name="reuse">True to allow the UDP port to be shared.</param>
            <returns>The socket that was created.</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerResolver.SendSubnetBroadcastAsync(Cognex.CogNamer.Client.ICogNamerNetworkAdapter,System.Net.Sockets.Socket,Cognex.CogNamer.Client.CogNamerPacket)">
            <summary>
            Send a packet on the network using a subnet-directed broadcast on all local network adapters.
            </summary>
            <param name="adapter">The network adapter to send the packet on.</param>
            <param name="sock">The socket to send the packet to.</param>
            <param name="packet">The packet to send to the socket.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerResolver.SendSubnetBroadcast(Cognex.CogNamer.Client.ICogNamerNetworkAdapter,System.Net.Sockets.Socket,Cognex.CogNamer.Client.CogNamerPacket)">
            <summary>
            Send a packet on the network using a subnet-directed broadcast on all local network adapters.
            </summary>
            <param name="adapter">The network adapter to send the packet on.</param>
            <param name="sock">The socket to send the packet to.</param>
            <param name="packet">The packet to send to the socket.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerResolver.SendLocalBroadcastAsync(System.Net.Sockets.Socket,Cognex.CogNamer.Client.CogNamerPacket)">
            <summary>
            Send a packet on the network using a limited broadcast on all local network adapters.
            </summary>
            <param name="sock">The socket to send the packet to.</param>
            <param name="packet">The packet to send to the socket.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerResolver.SendLocalBroadcast(System.Net.Sockets.Socket,Cognex.CogNamer.Client.CogNamerPacket)">
            <summary>
            Send a packet on the network using a limited broadcast on all local network adapters.
            </summary>
            <param name="sock">The socket to send the packet to.</param>
            <param name="packet">The packet to send to the socket.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerResolver.SendUnicastAsync(System.Net.Sockets.Socket,Cognex.CogNamer.Client.CogNamerPacket,System.Net.IPAddress,System.Boolean)">
            <summary>
            Send a unicast packet to the specified IP Address.
            </summary>
            <param name="sock">The socket to send the packet on.</param>
            <param name="packet">The packet to send.</param>
            <param name="dstIp">The IP Address to send the packet to.</param>
            <param name="altPort">True to send to the alternate CogNamer port as well.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerResolver.SendUnicast(System.Net.Sockets.Socket,Cognex.CogNamer.Client.CogNamerPacket,System.Net.IPAddress,System.Boolean)">
            <summary>
            Send a unicast packet to the specified IP Address.
            </summary>
            <param name="sock">The socket to send the packet on.</param>
            <param name="packet">The packet to send.</param>
            <param name="dstIp">The IP Address to send the packet to.</param>
            <param name="altPort">True to send to the alternate CogNamer port as well.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerResolver.ProcessPacket(Cognex.CogNamer.Client.ICogNamerNetworkAdapter,System.Byte[],System.Int32,Cognex.CogNamer.Client.CogNamerListener.CogNamerResolver.ResolveMode,System.Net.IPAddress)">
            <summary>
            Process an incoming packet for host information
            </summary>
            <param name="adapter">The adapter that the datagram was received on.</param>
            <param name="buffer">The datagram from the network.</param>
            <param name="len">The length of the datagram.</param>
            <param name="mode">The current resolve mode</param>
            <param name="localAddress">The local IPAddress of the interface that received this packet.</param>
            
            <returns>A CogNamerDevice if the datagram contains a hello packet, otherwise null.</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerResolver.GetScope(Cognex.CogNamer.Client.ICogNamerNetworkAdapter,Cognex.CogNamer.Client.Attributes.INetworkDeviceAttributeProvider,System.Boolean,Cognex.CogNamer.Client.CogNamerListener.CogNamerResolver.ResolveMode)">
            <summary>
            Gets the scope of the device given the network adapter the packet was received on and the attributes of the device.
            </summary>
            <param name="adapter">The network adapter the packet was received on, or null if unknown.</param>
            <param name="attributes">The attributes of the device.</param>
            <param name="broadcast">True if the packets was a broadcast packet.</param>
            <param name="mode">The current resolve mode.</param>
            <returns>The scope of the device.</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerResolver.ReadRecords(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads the records from the packet
            </summary>
            <param name="br">The byte stream to read the records from.</param>
            <param name="len">The length of the record data in the stream.</param>
            <returns>A list of records contained in the stream.</returns>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerCommunicationException">Thrown if the stream does not contain the expected information.</exception>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerResolver.ContainsAttribute(Cognex.CogNamer.Client.CogNamerDevice,Cognex.CogNamer.Client.Attributes.CogNamerNetworkDeviceAttribute)">
            <summary>
            Returns true if the host contains the specified attribute
            </summary>
            <param name="host">The device information to check.</param>
            <param name="filterAttr">The attribute that the host must contain.</param>
            <returns>True if the host contains the specified attribute</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerResolver.GetResolveMode(System.Net.IPAddress)">
            <summary>
            Gets the resolve mode for the specified IP Address
            </summary>
            <param name="dstIP"></param>
            <returns></returns>
        </member>
        <member name="T:Cognex.CogNamer.Client.CogNamerListener.CogNamerResolver.ResolveMode">
            <summary>
            Which mode should we use to resolve
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerListener.CogNamerResolver.GetNetworkInterface(System.Int32)">
            <summary>
            Gets information about the NetworkInterface with the specified index.
            </summary>
            <param name="index">The index of the network adapter to get information about.</param>
            <returns>A <c>CogNamerNetworkAdapter</c> object containing information about the specified network interface.</returns>
        </member>
        <member name="T:Cognex.CogNamer.Client.CogNamerPacketEventHandler">
            <exclude/>
            <summary>
            Callback delegate for use by the camera connection manager
            </summary>
        </member>
        <member name="T:Cognex.CogNamer.Client.CogNamerNetworkAdapter">
            <summary>
            A class that represents an installed Network Interface
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerNetworkAdapter.Index">
            <summary>The index of this network adapter</summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerNetworkAdapter.IP">
            <summary>The IP Address of this network adapter</summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerNetworkAdapter.SubnetMask">
            <summary>The subnet mask of this network adapter</summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerNetworkAdapter.SubnetBroadcast">
            <summary>The subnet-directed broadcast address for this network adapter</summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerNetworkAdapter.IsLoopback">
            <summary>This is the LocalHost adapter</summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerNetworkAdapter.UseCache">
            <summary>Set to allow caching of network adapters.</summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerNetworkAdapter.#ctor(System.Int64,System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Creates a data holder object for the NetworkAdapter with the specified information
            </summary>
            <param name="index"></param>
            <param name="ip"></param>
            <param name="subnetMask"></param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerNetworkAdapter.GetAllNetworkAdapters">
            <summary>
            Gets all of the network adapters currently running in the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerNetworkAdapter.FlushAdapterCache">
            <summary>
            Clears the network adapter cache, so the next time it is needed, a fresh copy is returned.
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerNetworkAdapter.IsInSubnet(System.Net.IPAddress)">
            <summary>
            Returns true if the specified IP Address is locally accessible from this network adapter
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerNetworkAdapter.Equals(System.Object)">
            <summary>
            Returns true if the network adapters are equivalent
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerNetworkAdapter.GetHashCode">
            <summary>
            Gets a hash code for this network adapter
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface">
            <summary>
            This class handles the network sockets for the CogNamer classes
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface.mSwitch">
            <summary>Controls debug tracing.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface._sockets">
            <summary>
            The UDP socket that we are listening for incoming packets and sending outgoing packets.
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface._shutdownSockets">
            <summary>
            UDP Sockets that have been shutdown.
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface._defaultSocket">
            <summary>
            The Default socket is used to send on the best interface for a particular IP.
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface._broadcastSocket">
            <summary>
            The Broadcast socket is only used to listen for broadcast packets sent to port 1069.
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface.NamerPort">
            <summary>
            Defines the port used for the Namer protocol.
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface.RecvPacketSize">
            <summary>
            The size of a single block of data received from the socket. 
            It will include a single datagram packet from the socket.
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface.RecvBufferSize">
            <summary>
            The size of the socket's receive buffer.  Set to 130000 to support
            250 namer packets.  This is the largest known installation of in-sights on a single network
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface.ReceiveBuffer">
            <summary>Holds a single datagram packet received from the socket.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface._recvThread">
            <summary>A thread that receives the namer packets.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface._recvThreadIsAlive">
            <summary>
            True while the receive thread is alive (i.e. the thread proc has not yet exited).
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface._running">
            <summary>True if the receive thread should be running</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface._started">
            <summary>True if the thread has started running</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface._disposed">
            <summary>True if this object has been disposed</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface._receiveMessageFromSupported">
            <summary>True if Socket.ReceiveMessageFrom is supported on this platform</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface._networkChangedNotify">
            <summary>True to notify the protocol handlers that the network changed</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface._netInterfaces">
            <summary>The cached network interface information</summary>
        </member>
        <member name="E:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface.PacketReceived">
            <summary>Fired when a packet is received from the network</summary>
        </member>
        <member name="E:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface.NetworkChanged">
            <summary>Fired when a change is detected in the network</summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface.#ctor">
            <summary>
            Create the network interface for the network monitor
            </summary>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerCommunicationException">If the network could not be bound</exception>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface.BindSendSockets">
            <summary>
            Binds a socket for every usable network adapter on this device.  This method can also be used
            to update the bound sockets after a network change on this device.
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface.NetworkChange_NetworkAddressChanged(System.Object,System.EventArgs)">
            <summary>
            Called from the system when a network change is detected from the PC.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface.BindSendSocket(Cognex.CogNamer.Client.CogNamerNetworkAdapter)">
            <summary>
            Creates a socket for the specified network adapter
            </summary>
            <param name="localIp">The IP Address of the network adapter to bind a socket for.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface.BindDefaultSendSocket">
            <summary>
            Binds a default socket for sending to devices on remote subnets.
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface.CreateBroadcastReceiveSocket">
            <summary>
            Creates a receive socket on port 1069 for receiving wakeup messages from In-Sights.
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface.DisableUdpConnReset(System.Net.Sockets.Socket)">
            <summary>
            Disables UDP connection reset exceptions on the socket.  By default, windows sockets will throw
            and exception if a connection reset message appears on the incoming port.  These reset messages
            can be caused by old messages on the network and should be ignored by the CogNamer implementation.
            </summary>
            <param name="socket">The socket to disable UDP Connection Reset exceptions on.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface.Start">
            <summary>
            Start the network interface thread
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface.Dispose">
            <summary>
            Dispose of the network interface.
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface.Stop">
            <summary>
            Stop the network interface thread
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface.IsRunning">
            <summary>
            Returns true if the receive thread is currently running.
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface.Run">
            <summary>
            Listens for incoming packets on the namer socket
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface.GetNetworkInterface(System.Int32)">
            <summary>
            Gets information about the NetworkInterface with the specified index.
            </summary>
            <param name="index">The index of the network adapter to get information about.</param>
            <returns>A <c>CogNamerNetworkAdapter</c> object containing information about the specified network interface.</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface.ClearCachedInterfaceInfo">
            <summary>
            Clears the cached network interface information
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface.WaitForReceivedPackets(System.Int32)">
            <summary>
            Waits for all received packets to be processed by the receive thread
            </summary>
            <param name="timeout"></param>
            <returns>True if all packets have been received</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface.SendPacket(System.Byte[],System.Int32,System.Net.IPEndPoint)">
            <summary>
            Sends a packet to the specified destination IP and port
            </summary>
            <param name="packet"></param>
            <param name="len"></param>
            <param name="dest"></param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface.SendSubnetBroadcast(System.Byte[],System.Int32)">
            <summary>
            Sends a broadcast message to all locally connected subnets on port 1069
            </summary>
            <param name="packet"></param>
            <param name="len"></param>
        </member>
        <member name="T:Cognex.CogNamer.Client.CogNamerNetworkMonitorNetworkInterface.AdapterSocket">
            <summary>
            Associates a socket with a network adapter
            </summary>
        </member>
        <member name="T:Cognex.CogNamer.Client.CogNamerPacket">
            <summary>
            The CogNamerPacket class is used to construct and parse CogNamer protocol packets
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerPacket.AVNAMER_PROTO_VERSION">
            <summary>CogNamer protocol version number</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerPacket.AVNAMER_MAGIC">
            <summary>CogNamer protocol packet identifier</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerPacket._buffer">
            <summary>Buffer containing the received packet data.</summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerPacket.#ctor">
            <summary>
            Constructs an uninitialized buffer
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerPacket.#ctor(System.Int32,System.Byte,System.Int32,Cognex.CogNamer.Client.CogNamerRecordList)">
            <summary>
            Constructs a CogNamer packet
            </summary>
            <param name="command">The command to send in the packet.</param>
            <param name="flags">The contents of the flags field.</param>
            <param name="errorCode">The contents of the error code field.</param>
            <param name="records">The records to include in the packet.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerPacket.GetBuffer">
            <summary>
            Gets the contents of the packet buffer
            </summary>
            <returns>The contents of the packet buffer.</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerPacket.ReadVarInt(System.IO.BinaryReader)">
            <summary>
            Reads a variable length integer from the byte stream.
            </summary>
            <param name="br">The binary reader used to read from the byte stream.</param>
            <returns>The integer read from the byte stream.</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerPacket.WriteVarInt(System.IO.BinaryWriter,System.Int32)">
            <summary>
            Writes a variable length integer to the byte stream.
            </summary>
            <param name="bw">The byte stream to write to.</param>
            <param name="value">The value to write to the byte stream.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerPacket.GetVarIntLen(System.Int32)">
            <summary>
            Returns the number of bytes required to write the specified value into a variable length integer field.
            </summary>
            <param name="val">The value to check.</param>
            <returns>The number of bytes required.</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerPacket.ReadIP(System.IO.BinaryReader)">
            <summary>
            Reads an IP Address from the byte stream.
            </summary>
            <param name="br">The byte stream to read from.</param>
            <returns>The IP Address read from the byte stream.</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerPacket.WriteIP(System.IO.BinaryWriter,System.Net.IPAddress)">
            <summary>
            Writes an IP Address to a byte stream.
            </summary>
            <param name="bw">The byte stream to write to.</param>
            <param name="ip">The IP Address to write into the byte stream.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerPacket.ReadString(System.IO.BinaryReader)">
            <summary>
            Reads a length prefixed string from the byte stream.
            </summary>
            <param name="br">The stream to read from.</param>
            <returns>The string read from the stream.</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerPacket.GetStringLength(System.String)">
            <summary>
            Returns the number of bytes required to represent the specified string in a 
            length prefixed field.
            </summary>
            <param name="s">The string to check.</param>
            <returns>The number of bytes required.</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerPacket.ReadString(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads the specified string from the byte stream.
            </summary>
            <param name="br">The stream to read from.</param>
            <param name="len">The number of bytes to read.</param>
            <returns>The string that was read from the stream.</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerPacket.WriteString(System.IO.BinaryWriter,System.String)">
            <summary>
            Writes the specified string to the byte stream in a length-prefixed format.
            </summary>
            <param name="bw">The stream to write to.</param>
            <param name="s">The string to write.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerPacket.WriteString(System.IO.BinaryWriter,System.Byte[])">
            <summary>
            Writes the specified string to the byte stream in a length-prefixed format.
            </summary>
            <param name="bw">The stream to write to.</param>
            <param name="s">The bytes to write.</param>
        </member>
        <member name="T:Cognex.CogNamer.Client.CogNamerPacketEventArgs">
            <summary>
            EventArgs for the PacketReceived event.
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerPacketEventArgs._cmd">
            <summary>
            The packet command.
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerPacketEventArgs._device">
            <summary>
            The device information in the command.
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerPacketEventArgs.#ctor(Cognex.CogNamer.Client.Attributes.CogNamerCommand,Cognex.CogNamer.Client.CogNamerDevice)">
            <summary>
            Creates a CogNamerPacketEventArgs object.
            </summary>
            <param name="cmd">The CogNamer command that was received.</param>
            <param name="device">The device information included with the command.</param>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerPacketEventArgs.Command">
            <summary>
            Gets the CogNamer command received.
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerPacketEventArgs.Device">
            <summary>
            Gets the device information included with the command.
            </summary>
        </member>
        <member name="T:Cognex.CogNamer.Client.CogNamerPacketReceivedEventArgs">
            <summary>
            Provides data for the PacketReceived event which is raised after a packet has been received from the network.
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerPacketReceivedEventArgs._buffer">
            <summary>The buffer containing the received packet.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerPacketReceivedEventArgs._length">
            <summary>The length of the received packet.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerPacketReceivedEventArgs._endpoint">
            <summary>The source of the received packet.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerPacketReceivedEventArgs._localIP">
            <summary>IP Address of the adapter that received this packet, or IPAddress.Any if unknown.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerPacketReceivedEventArgs._handled">
            <summary>Set to true when a packet handler handles this packet.</summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerPacketReceivedEventArgs.#ctor(System.Byte[],System.Int32,System.Net.IPEndPoint,System.Net.IPAddress)">
            <summary>Initializes a new instance of the <see cref="T:Cognex.CogNamer.Client.CogNamerPacketReceivedEventArgs" /> class.</summary>
            <param name="buffer">The data buffer containing the received packet.</param>
            <param name="length">The length of the received packet.</param>
            <param name="endpoint">The source of the received packet.</param>
            <param name="localIP">The IP Address of the interface that this packet was received on.</param>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerPacketReceivedEventArgs.Data">
            <summary>
            Gets the buffer containing the received packet.
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerPacketReceivedEventArgs.Length">
            <summary>
            Gets the length of the received packet.
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerPacketReceivedEventArgs.IPEndPoint">
            <summary>
            Gets the source of the received packet.
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerPacketReceivedEventArgs.LocalIP">
            <summary>
            Gets the IP Address of the network adapter that this packet was received on.
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerPacketReceivedEventArgs.Handled">
            <summary>
            Gets or sets whether this packet has been handled by a protocol handler.
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerPacketReceivedEventArgs.IsPacketLocal(System.Net.IPAddress)">
            <summary>
            Returns true if the packet was received from a device which can be communicated to without
            going through a gateway.
            </summary>
            <param name="deviceNetMask">The netmask of the device</param>
            <returns></returns>
        </member>
        <member name="T:Cognex.CogNamer.Client.CogNamerRecord">
            <summary>
            Contains the data for a CogNamer record
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerRecord._type">
            <summary>Record type</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerRecord._data">
            <summary>Data buffer</summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerRecord.#ctor(Cognex.CogNamer.Client.Attributes.CogNamerAttributeType,System.Byte[])">
            <summary>
            Creates a CogNamerRecord from the specified type and data buffer
            </summary>
            <param name="type">The type of record</param>
            <param name="data">The data for the specified record type</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerRecord.#ctor(Cognex.CogNamer.Client.Attributes.CogNamerAttributeType,System.String)">
            <summary>
            Creates a CogNamerRecord from the specified type and data buffer
            </summary>
            <param name="type">The type of record</param>
            <param name="data">The data for the specified record type</param>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerRecord.IsAttributeRecord">
            <summary>
            Returns true if this record contains attribute data
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerRecord.RecordType">
            <summary>
            Gets the record type.
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerRecord.Data">
            <summary>
            Gets the data buffer.
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerRecord.Length">
            <summary>
            Gets the length of the data buffer for this record.
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerRecord.GetString">
            <summary>
            Gets a string from the data buffer for this record.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerRecord.Write(System.IO.BinaryWriter)">
            <summary>
            Writes this record to the specified byte stream
            </summary>
            <param name="bw">The bytes stream to write this packet to.</param>
        </member>
        <member name="T:Cognex.CogNamer.Client.CogNamerRecordList">
            <summary>
            Contains a list of records
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerRecordList.#ctor">
            <summary>
            Creates an empty list of records
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerRecordList.#ctor(System.Int32)">
            <summary>
            Creates a list of records with the specified initial size.
            </summary>
            <param name="size">The initial size of the record list.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerRecordList.FindRecord(Cognex.CogNamer.Client.Attributes.CogNamerAttributeType)">
            <summary>
            Finds a record in the list with the specified type.
            </summary>
            <param name="type">The type of record to find in the list.</param>
            <returns>The record in the list, or null if a record of the specified type cannot be found.</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerRecordList.Add(Cognex.CogNamer.Client.Attributes.CogNamerAttributeType,System.Byte[])">
            <summary>
            Adds a record to the list with the specified type and data
            </summary>
            <param name="type">The type of record to add to the list.</param>
            <param name="data">The data contained in the record</param>
            <returns>The new record.</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerRecordList.Add(Cognex.CogNamer.Client.Attributes.CogNamerAttributeType,System.String)">
            <summary>
            Adds a record to the list with the specified type and data
            </summary>
            <param name="type">The type of record to add to the list.</param>
            <param name="data">The data contained in the record</param>
            <returns>The new record.</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerRecordList.GetAttributes">
            <summary>
            Gets an attribute provider for this record list.
            </summary>
            <returns>A new <c>INetworkDeviceAttributeProvider</c>.</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerRecordList.GetAttribute(Cognex.CogNamer.Client.Attributes.CogNamerAttributeType)">
            <summary>
            Gets the specified attribute type from the list.
            </summary>
            <param name="type">The type of attribute to find in the list.</param>
            <returns>A new <c>CogNamerNetworkDeviceAttribute</c> containing the attribute data, or null if the 
            attribute could not be found.</returns>
        </member>
        <member name="T:Cognex.CogNamer.Client.CogNamerRecordList.RecordListAttributeProvider">
            <summary>
            Implements an attribute provider for the CogNamerRecordList
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerRecordList.RecordListAttributeProvider._records">
            <summary>
            The record list to provide attributes for
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerRecordList.RecordListAttributeProvider.#ctor(Cognex.CogNamer.Client.CogNamerRecordList)">
            <summary>
            Creates an attribute provider for the specified record list
            </summary>
            <param name="records"></param>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerRecordList.RecordListAttributeProvider.Item(Cognex.CogNamer.Client.Attributes.CogNamerAttributeType)">
            <summary>
            Returns the attribute with the specified type.
            </summary>
            <param name="type">The type of attribute to get from the list</param>
            <returns>The attribute, or null if it could not be found.</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerRecordList.RecordListAttributeProvider.Contains(Cognex.CogNamer.Client.Attributes.CogNamerAttributeType)">
            <summary>
            Returns true if the list contains an attribute of the specified type.
            </summary>
            <param name="type">The type of attribute to check.</param>
            <returns>True is the list contains the specified type of attribute.</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerRecordList.RecordListAttributeProvider.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Creates an enumerator for the list of attributes
            </summary>
            <returns>A new enumerator</returns>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerRecordList.RecordListAttributeProvider.Count">
            <summary>
            Gets the number of items in the attribute list.
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerRecordList.RecordListAttributeProvider.GetEnumerator">
            <summary>
            Creates an enumerator for the list of attributes
            </summary>
            <returns>A new enumerator</returns>
        </member>
        <member name="T:Cognex.CogNamer.Client.CogNamerRecordList.RecordListAttributeProvider.AttributeEnumerator">
            <summary>
            Creates an enumerator for the record list attribute provider
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerRecordList.RecordListAttributeProvider.AttributeEnumerator._recordEnumerator">
            <summary>
            The list of records to enumerate.
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerRecordList.RecordListAttributeProvider.AttributeEnumerator.#ctor(Cognex.CogNamer.Client.CogNamerRecordList)">
            <summary>
            Creates a new enumerator for the record list provider
            </summary>
            <param name="records">The record list to enumerate.</param>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerRecordList.RecordListAttributeProvider.AttributeEnumerator.Current">
            <summary>
            The current attribute
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerRecordList.RecordListAttributeProvider.AttributeEnumerator.Dispose">
            <summary>
            Dispose of the enumerator
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerRecordList.RecordListAttributeProvider.AttributeEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current object
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerRecordList.RecordListAttributeProvider.AttributeEnumerator.MoveNext">
            <summary>
            Move to the next item in the list
            </summary>
            <returns>True if there are more elements</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerRecordList.RecordListAttributeProvider.AttributeEnumerator.Reset">
            <summary>
            Resets the enumerator to the beginning.
            </summary>
        </member>
        <member name="T:Cognex.CogNamer.Client.CogNamerResetPasswordService">
            <summary>
            Manage the entire process of reseting a device to the defaults
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerResetPasswordService._deviceAddress">
            <summary>The macid address of the device to reset.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerResetPasswordService._unhandledException">
            <summary>The exception that occurred during the reset process, or null.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerResetPasswordService._listener">
            <summary>CogNamer network listener.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerResetPasswordService._device">
            <summary>The device as resolved by CogNamer.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerResetPasswordService._done">
            <summary>Set to true when the operation has completed.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerResetPasswordService._ipConfigReceived">
            <summary>Set to true once the IP Config command has been received from the device.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerResetPasswordService._cmdProcDone">
            <summary>Set on completion of the ThreadPool thread.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerResetPasswordService._stateString">
            <summary>Notifies the client of the current state of the process.</summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerResetPasswordService.Success">
            <summary>
            Did it complete successfully
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.CogNamerResetPasswordService.Exception">
            <summary>
            What was the error
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerResetPasswordService.#ctor(System.String,Cognex.CogNamer.Client.ICogNamerNetworkMonitorNetworkInterface)">
            <summary>
            Creates a new CogNamer base Reset Settings service
            </summary>
            <param name="deviceAddress">The MACIDof the device to reset.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerResetPasswordService.Dispose">
            <summary>
            Cleanup
            </summary>    
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerResetPasswordService.ResetPassword(System.Threading.ManualResetEvent,System.Action{System.String,System.Int32})">
            <summary>
            Initializes the reset to default asynchronous operation.
            </summary>
            <param name="stopEvt">Stop the identify when Set.</param>
            <param name="statusCallBack">Returns the status to this delegate.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerResetPasswordService.HandleCogNamerPacket(System.Object,Cognex.CogNamer.Client.CogNamerPacketEventArgs)">
            <summary>
            Called by the ConnectionManagerController to notify this configurator that an IP Request message
            came in for this sensor.
            </summary>
            <param name="sender">The protocol handler</param>
            <param name="e">The event args</param>
        </member>
        <member name="T:Cognex.CogNamer.Client.CogNamerResetToDefaultService">
            <summary>
            Manage the entire process of reseting a device to the defaults
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerResetToDefaultService._deviceAddress">
            <summary>The network address of the device to reset.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerResetToDefaultService._unhandledException">
            <summary>The exception that occurred during the reset process, or null.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerResetToDefaultService._listener">
            <summary>CogNamer network listener.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerResetToDefaultService._device">
            <summary>The device as resolved by CogNamer.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerResetToDefaultService._done">
            <summary>Set to true when the operation has completed.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerResetToDefaultService._ipConfigReceived">
            <summary>Set to true once the IP Config command has been received from the device.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerResetToDefaultService._cmdProcDone">
            <summary>Set on completion of the ThreadPool thread.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerResetToDefaultService._stateString">
            <summary>Notifies the client of the current state of the process.</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerResetToDefaultService._username">
            <summary>Username</summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.CogNamerResetToDefaultService._password">
            <summary>Password</summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerResetToDefaultService.#ctor(System.String,System.String,System.String,Cognex.CogNamer.Client.ICogNamerNetworkMonitorNetworkInterface)">
            <summary>
            Creates a new CogNamer base Reset Settings service
            </summary>
            <param name="deviceAddress">The network address of the device to reset.</param>
            <param name="username">The username to connect to.</param>
            <param name="password">The password for the specified user</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerResetToDefaultService.Dispose">
            <summary>
            Cleanup
            </summary>    
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerResetToDefaultService.ResetToDefaults(System.Threading.ManualResetEvent,System.Action{System.String})">
            <summary>
            Initializes the reset to default asynchronous operation.
            </summary>
            <param name="stopEvt">Stop the identify when Set.</param>
            <param name="statusCallBack">Returns the status to this delegate.</param>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerResetToDefaultService.HandleCogNamerPacket(System.Object,Cognex.CogNamer.Client.CogNamerPacketEventArgs)">
            <summary>
            Called by the ConnectionManagerController to notify this configurator that an IP Request message
            came in for this sensor.
            </summary>
            <param name="sender">The protocol handler</param>
            <param name="e">The event args</param>
        </member>
        <member name="T:Cognex.CogNamer.Client.CogNamerResolver">
            <summary>
            This class is used to search the local network for devices implementing the CogNamer protocol.
            </summary>
            <remarks>This functions and class are obsolete please remove by CogNamer 3.0</remarks>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerResolver.ResolveAsync(System.Net.IPAddress,System.Threading.CancellationToken)">
            <summary>
            Searches the local network for a device containing the specified records.
            </summary>
            <param name="dstIp">IP Address of the device we are resolving, 
            IPAddress.Any to send on all connected networks, or 
            IPAddress.Broadcast to send a limited broadcast.</param>
            <param name="cancel">The cancellation token to exit. Can be None if no cancellation is requested.</param>
            <returns>A Task which will resolve the device.</returns>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerCommunicationException">Thrown if there is a problem sending packets to the network</exception>
            <remarks>This functions and class are obsolete please remove by CogNamer 3.0</remarks>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerResolver.Resolve(System.Net.IPAddress)">
            <summary>
            Searches the local network for a device containing the specified records.
            </summary>
            <param name="dstIp">IP Address of the device we are resolving, 
            IPAddress.Any to send on all connected networks, or 
            IPAddress.Broadcast to send a limited broadcast.</param>
            <returns></returns>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerCommunicationException">Thrown if there is a problem sending packets to the network</exception>
            <remarks>This functions and class are obsolete please remove by CogNamer 3.0</remarks>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerResolver.ResolveAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get information about the device with the specified name on the local network.
            </summary>
            <param name="name">The name of the device to look for</param>
            <param name="cancel">The cancellation token to exit. Can be None if no cancellation is requested.</param>
            <returns>A Task which will resolve the device. The sensor information if the device is found, otherwise null.</returns>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerCommunicationException">Thrown if there is a problem sending packets to the network</exception>
            <remarks>This functions and class are obsolete please remove by CogNamer 3.0</remarks>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerResolver.Resolve(System.String)">
            <summary>
            Get information about the device with the specified name on the local network.
            </summary>
            <param name="name">The name of the device to look for</param>
            <returns>The sensor information if the device is found, otherwise null.</returns>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerCommunicationException">Thrown if there is a problem sending packets to the network</exception>
            <remarks>This functions and class are obsolete please remove by CogNamer 3.0</remarks>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerResolver.ResolveAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get information about the device with the specified macid on the local network.
            </summary>
            <param name="macId">The mac address of the device to look for</param>
            <param name="broadcast">Whether to broadcast this request.</param>
            <param name="cancel">The cancellation token to exit. Can be None if no cancellation is requested.</param>
            <returns>A Task which will resolve the device. The sensor information if the device is found, otherwise null.</returns>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerCommunicationException">Thrown if there is a problem sending packets to the network</exception>
            <exception cref="T:System.FormatException">If the macId is not a parsable address</exception>
            <remarks>This functions and class are obsolete please remove by CogNamer 3.0</remarks>
        </member>
        <member name="M:Cognex.CogNamer.Client.CogNamerResolver.Resolve(System.String,System.Boolean)">
            <summary>
            Get information about the device with the specified macid on the local network.
            </summary>
            <param name="macId">The mac address of the device to look for</param>
            <param name="broadcast">Whether to broadcast this request.</param>
            <returns>The sensor information if the device is found, otherwise null.</returns>
            <exception cref="T:Cognex.CogNamer.Client.CogNamerCommunicationException">Thrown if there is a problem sending packets to the network</exception>
            <exception cref="T:System.FormatException">If the macId is not a parsable address</exception>
            <remarks>This functions and class are obsolete please remove by CogNamer 3.0</remarks>
        </member>
        <member name="T:Cognex.CogNamer.Client.Common.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Cognex.CogNamer.Client.Common.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.AttemptingToContact">
            <summary>
              Looks up a localized string similar to Attempting to contact device....
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.ChangingNetworkSettings">
            <summary>
              Looks up a localized string similar to Changing network settings....
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.CogNamerErrorCode_ErrorInsufficientPrivilege">
            <summary>
              Looks up a localized string similar to The user account does not have sufficient privileges to perform the command..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.CogNamerErrorCode_ErrorInvalidNetworkSettings">
            <summary>
              Looks up a localized string similar to The supplied network settings are invalid..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.CogNamerErrorCode_ErrorInvalidPassword">
            <summary>
              Looks up a localized string similar to The supplied password is not valid for the specified user name..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.CogNamerErrorCode_ErrorInvalidUsername">
            <summary>
              Looks up a localized string similar to The specified user name is not valid on this device..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.CogNamerErrorCode_ErrorMissingRequiredRecord">
            <summary>
              Looks up a localized string similar to The command was missing a required record..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.CogNamerErrorCode_ErrorUnsupportedCommand">
            <summary>
              Looks up a localized string similar to The command is not supported on this device..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.CogNamerErrorCode_Failed">
            <summary>
              Looks up a localized string similar to Command failed..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.CommunicationException">
            <summary>
              Looks up a localized string similar to A communication error occurred attempting to complete the requested operation..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.CompletedSuccessfully">
            <summary>
              Looks up a localized string similar to Completed Successfully..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.ConfigurationException_1">
            <summary>
              Looks up a localized string similar to An error in the file {0} caused the configuration to fail to load..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.Connected">
            <summary>
              Looks up a localized string similar to Connected.
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.ConnectingTo">
            <summary>
              Looks up a localized string similar to Connecting to {0}....
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.CouldNotResolveHost">
            <summary>
              Looks up a localized string similar to Could not resolve host &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.FileAlreadyExists">
            <summary>
              Looks up a localized string similar to The destination file already exists..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.FileNotFoundException">
            <summary>
              Looks up a localized string similar to Could not find the file on the remote file system..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.FileOperationFailedException">
            <summary>
              Looks up a localized string similar to The requested file operation failed..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.FileReadFailed">
            <summary>
              Looks up a localized string similar to Could not successfully read the specified file..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.FileStoreFailed">
            <summary>
              Looks up a localized string similar to The specified file could not be stored on the In-Sight sensor..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.FileTransferError">
            <summary>
              Looks up a localized string similar to Could not find an acceptable IP Address to perform the file transfer..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.FirmwareNotSupported">
            <summary>
              Looks up a localized string similar to The firmware version does not support the requested operation..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.FtpConnect">
            <summary>
              Looks up a localized string similar to Could not establish an FTP connection with the system..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.InsufficientPermissions">
            <summary>
              Looks up a localized string similar to Insufficient permissions to perform the requested operation..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.InsufficientReadPermissions">
            <summary>
              Looks up a localized string similar to Insufficient read permissions to perform the requested operation..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.InsufficientWritePermissions">
            <summary>
              Looks up a localized string similar to Insufficient write permissions to perform the requested operation..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.InvalidAddressException_1">
            <summary>
              Looks up a localized string similar to Invalid IP Address {0}..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.InvalidHostName">
            <summary>
              Looks up a localized string similar to The specified Device Name is invalid..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.InvalidLogonException">
            <summary>
              Looks up a localized string similar to An invalid user name or password was specified..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.InvalidPassword">
            <summary>
              Looks up a localized string similar to The specified password is incorrect..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.InvalidResponse">
            <summary>
              Looks up a localized string similar to Invalid response received..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.LimitExceededException">
            <summary>
              Looks up a localized string similar to Operation would cause a specified limit to be exceeded..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.Move">
            <summary>
              Looks up a localized string similar to Move.
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.NotConnected">
            <summary>
              Looks up a localized string similar to Not connected.
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.NotConnectedException">
            <summary>
              Looks up a localized string similar to Not connected..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.NotRecognizedException">
            <summary>
              Looks up a localized string similar to System not recognized..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.ResponseNotReceived">
            <summary>
              Looks up a localized string similar to Response not received from device..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.SerializationTypeException">
            <summary>
              Looks up a localized string similar to An invalid data type was encountered during serialization..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.SymbolicTagNotFoundException">
            <summary>
              Looks up a localized string similar to Could not find the symbolic tag..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.TheOperationWasCanceled">
            <summary>
              Looks up a localized string similar to The operation was canceled..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.TimeoutException">
            <summary>
              Looks up a localized string similar to Operation timed out..
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.UnknownSensorType">
            <summary>
              Looks up a localized string similar to Unknown Sensor Type.
            </summary>
        </member>
        <member name="P:Cognex.CogNamer.Client.Common.Strings.USBDriveNotFoundException">
            <summary>
              Looks up a localized string similar to No USB drive detected..
            </summary>
        </member>
        <member name="T:Cognex.CogNamer.Client.SocketExtensions">
            <summary>
            Async support for sockets.
            </summary>
        </member>
        <member name="M:Cognex.CogNamer.Client.SocketExtensions.ConnectTaskAsync(System.Net.Sockets.Socket,System.String,System.Int32)">
            <summary>
            Connect to a particular endpoint. 
            </summary>
            <param name="socket">The socket.</param>
            <param name="host">The host name.</param>
            <param name="port">The port to connect on.</param>
            <returns>The task to await.</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.SocketExtensions.ReceiveTaskAsync(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Receive a message on this socket.
            </summary>
            <param name="socket">The socket.</param>
            <param name="buffer">The message buffer</param>
            <param name="offset">The offset into the buffer to start sending from.</param>
            <param name="count">The number of bytes to receive.</param>
            <returns>A task that when awaited returns the length received.</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.SocketExtensions.ReceiveTaskAsync(System.Net.Sockets.Socket,System.Byte[])">
            <summary>
            Receive a message on this socket.
            </summary>
            <param name="socket">The socket.</param>
            <param name="buffer">The message buffer</param>
            <returns>A task that when awaited returns the length received.</returns>
        </member>
        <member name="T:Cognex.CogNamer.Client.SocketExtensions.ReceiveInfo">
            <summary>
            A structure to return the received information
            </summary>
        </member>
        <member name="F:Cognex.CogNamer.Client.SocketExtensions.ReceiveInfo.Buffer">
            <summary/>
        </member>
        <member name="F:Cognex.CogNamer.Client.SocketExtensions.ReceiveInfo.Length">
            <summary/>
        </member>
        <member name="F:Cognex.CogNamer.Client.SocketExtensions.ReceiveInfo.Flags">
            <summary/>
        </member>
        <member name="F:Cognex.CogNamer.Client.SocketExtensions.ReceiveInfo.PacketInfo">
            <summary/>
        </member>
        <member name="F:Cognex.CogNamer.Client.SocketExtensions.ReceiveInfo.EndPoint">
            <summary/>
        </member>
        <member name="M:Cognex.CogNamer.Client.SocketExtensions.ReceiveFromAsync(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Net.IPEndPoint,System.Net.Sockets.SocketFlags)">
            <summary>
            Receive a message from a particular end point.
            </summary>
            <param name="socket">The socket</param>
            <param name="buffer">The buffer to place the received message into.</param>
            <param name="length">The number of bytes to receive.</param>
            <param name="endPoint">The end point to receive from. Use IPAddress.Any to receive everything.</param>
            <param name="flags">The socket flags. Typically set to SocketFlags.None</param>
            <returns>A task to be awaited.</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.SocketExtensions.SendTaskAsync(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Send a message.
            </summary>
            <param name="socket">The socket</param>
            <param name="buffer">The bytes to send.</param>
            <param name="length">The number of bytes to send.</param>    
            <param name="flags">The socket flags. Typically set to SocketFlags.None</param>
            <returns>A task to be awaited.</returns>
        </member>
        <member name="M:Cognex.CogNamer.Client.SocketExtensions.SendToAsync(System.Net.Sockets.Socket,System.Net.IPEndPoint,System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Send a message.
            </summary>
            <param name="socket">The socket</param>
            <param name="endPoint">The end point to send to.</param>
            <param name="buffer">The bytes to send.</param>
            <param name="length">The number of bytes to send.</param>    
            <param name="flags">The socket flags. Typically set to SocketFlags.None</param>
            <returns>A task to be awaited.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Cognex.Internal.TaskExtensions.WithWaitCancellation(System.Threading.Tasks.Task,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})" -->
        <!-- Badly formed XML comment ignored for member "M:Cognex.Internal.TaskExtensions.WithWaitCancellation``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken,System.Nullable{System.TimeSpan})" -->
        <member name="M:Cognex.Internal.TaskExtensions.WasDelayCancelled(System.Threading.Tasks.Task)">
            <summary>
            Determine is a task was canceled. The main place is used is for Task.Delay. 
            </summary>
            <param name="task"></param>
            <returns>True if the task was canceled</returns>
        </member>
        <member name="T:CoverageExcludeAttribute">
            <summary>
            This attribute can be applied to exclude things from unit test coverage metrics.
            </summary>
        </member>
    </members>
</doc>
